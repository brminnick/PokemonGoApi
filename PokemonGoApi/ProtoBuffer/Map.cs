// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PokemonGoApi.Proto {

  /// <summary>Holder for reflection information generated from map.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MapReflection {

    #region Descriptor
    /// <summary>File descriptor for map.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgltYXAucHJvdG8SElBva2Vtb25Hb0FwaS5Qcm90bxoPaW52ZW50b3J5LnBy",
            "b3RvIl8KEkdldE1hcE9iamVjdHNQcm90bxIOCgZDZWxsSWQYASABKAwSEwoL",
            "U2luY2VUaW1lTXMYAiABKAwSEQoJUGxheWVyTGF0GAMgASgBEhEKCVBsYXll",
            "ckxuZxgEIAEoASKRAQoVR2V0TWFwT2JqZWN0c091dFByb3RvEjcKB01hcENl",
            "bGwYASADKAsyJi5Qb2tlbW9uR29BcGkuUHJvdG8uQ2xpZW50TWFwQ2VsbFBy",
            "b3RvEj8KBlN0YXR1cxgCIAEoDjIvLlBva2Vtb25Hb0FwaS5Qcm90by5HZXRN",
            "YXBPYmplY3RzT3V0UHJvdG9TdGF0dXMioAQKEkNsaWVudE1hcENlbGxQcm90",
            "bxIQCghTMkNlbGxJZBgBIAEoBBISCgpBc09mVGltZU1zGAIgASgDEjIKBEZv",
            "cnQYAyADKAsyJC5Qb2tlbW9uR29BcGkuUHJvdG8uUG9rZW1vbkZvcnRQcm90",
            "bxI9CgpTcGF3blBvaW50GAQgAygLMikuUG9rZW1vbkdvQXBpLlByb3RvLkNs",
            "aWVudFNwYXduUG9pbnRQcm90bxIVCg1EZWxldGVkT2JqZWN0GAYgAygJEhcK",
            "D0lzVHJ1bmNhdGVkTGlzdBgHIAEoCBJACgtGb3J0U3VtbWFyeRgIIAMoCzIr",
            "LlBva2Vtb25Hb0FwaS5Qcm90by5Qb2tlbW9uU3VtbWFyeUZvcnRQcm90bxJG",
            "ChNEZWNpbWF0ZWRTcGF3blBvaW50GAkgAygLMikuUG9rZW1vbkdvQXBpLlBy",
            "b3RvLkNsaWVudFNwYXduUG9pbnRQcm90bxI9Cg1OZWFyYnlQb2tlbW9uGAsg",
            "AygLMiYuUG9rZW1vbkdvQXBpLlByb3RvLk5lYXJieVBva2Vtb25Qcm90bxI5",
            "CgtXaWxkUG9rZW1vbhgFIAMoCzIkLlBva2Vtb25Hb0FwaS5Qcm90by5XaWxk",
            "UG9rZW1vblByb3RvEj0KEENhdGNoYWJsZVBva2Vtb24YCiADKAsyIy5Qb2tl",
            "bW9uR29BcGkuUHJvdG8uTWFwUG9rZW1vblByb3RvIroBCg9NYXBQb2tlbW9u",
            "UHJvdG8SFAoMU3Bhd25Qb2ludElkGAEgASgJEhMKC0VuY291bnRlcklkGAIg",
            "ASgGEj0KDVBva2VkZXhUeXBlSWQYAyABKA4yJi5Qb2tlbW9uR29BcGkuUHJv",
            "dG8uQ3VzdG9tX1Bva2Vtb25OYW1lEhgKEEV4cGlyYXRpb25UaW1lTXMYBCAB",
            "KAMSEAoITGF0aXR1ZGUYBSABKAESEQoJTG9uZ2l0dWRlGAYgASgBIoIHChBQ",
            "b2tlbW9uRm9ydFByb3RvEg4KBkZvcnRJZBgBIAEoCRIWCg5MYXN0TW9kaWZp",
            "ZWRNcxgCIAEoAxIQCghMYXRpdHVkZRgDIAEoARIRCglMb25naXR1ZGUYBCAB",
            "KAESDwoHRW5hYmxlZBgIIAEoCBIyCgRUZWFtGAUgASgOMiQuUG9rZW1vbkdv",
            "QXBpLlByb3RvLkN1c3RvbV9UZWFtQ29sb3ISPgoOR3VhcmRQb2tlbW9uSWQY",
            "BiABKA4yJi5Qb2tlbW9uR29BcGkuUHJvdG8uQ3VzdG9tX1Bva2Vtb25OYW1l",
            "EhkKEUd1YXJkUG9rZW1vbkxldmVsGAcgASgFEhEKCUd5bVBvaW50cxgKIAEo",
            "AxISCgpJc0luQmF0dGxlGAsgASgIEi4KCEZvcnRUeXBlGAkgASgOMhwuUG9r",
            "ZW1vbkdvQXBpLlByb3RvLkZvcnRUeXBlEhoKEkNvb2xkb3duQ29tcGxldGVN",
            "cxgOIAEoAxJBCgdTcG9uc29yGA8gASgOMjAuUG9rZW1vbkdvQXBpLlByb3Rv",
            "LlBva2Vtb25Gb3J0UHJvdG8uRm9ydFNwb25zb3ISTQoNUmVuZGVyaW5nVHlw",
            "ZRgQIAEoDjI2LlBva2Vtb25Hb0FwaS5Qcm90by5Qb2tlbW9uRm9ydFByb3Rv",
            "LkZvcnRSZW5kZXJpbmdUeXBlEhoKEkFjdGl2ZUZvcnRNb2RpZmllchgMIAEo",
            "DBJTCgxGb3J0THVyZUluZm8YDSABKAsyPS5Qb2tlbW9uR29BcGkuUHJvdG8u",
            "UG9rZW1vbkZvcnRQcm90by5DdXN0b21fRm9ydEx1cmVJbmZvUHJvdG8akQEK",
            "GEN1c3RvbV9Gb3J0THVyZUluZm9Qcm90bxIOCgZGb3J0SWQYASABKAkSEAoI",
            "Tm90U3VyZTIYAiABKAESPQoNQWN0aXZlUG9rZW1vbhgDIAEoDjImLlBva2Vt",
            "b25Hb0FwaS5Qcm90by5DdXN0b21fUG9rZW1vbk5hbWUSFAoMTHVyZUV4cGly",
            "eU1zGAQgASgDIkIKC0ZvcnRTcG9uc29yEhEKDVVOU0VUX1NQT05TT1IQABIN",
            "CglNQ0RPTkFMRFMQARIRCg1QT0tFTU9OX1NUT1JFEAIiMwoRRm9ydFJlbmRl",
            "cmluZ1R5cGUSCwoHREVGQVVMVBAAEhEKDUlOVEVSTkFMX1RFU1QQASLHAQoQ",
            "V2lsZFBva2Vtb25Qcm90bxITCgtFbmNvdW50ZXJJZBgBIAEoBhIWCg5MYXN0",
            "TW9kaWZpZWRNcxgCIAEoAxIQCghMYXRpdHVkZRgDIAEoARIRCglMb25naXR1",
            "ZGUYBCABKAESFAoMU3Bhd25Qb2ludElkGAUgASgJEjEKB1Bva2Vtb24YByAB",
            "KAsyIC5Qb2tlbW9uR29BcGkuUHJvdG8uUG9rZW1vblByb3RvEhgKEFRpbWVU",
            "aWxsSGlkZGVuTXMYCyABKAUiPAoVQ2xpZW50U3Bhd25Qb2ludFByb3RvEhAK",
            "CExhdGl0dWRlGAIgASgBEhEKCUxvbmdpdHVkZRgDIAEoASJtChdQb2tlbW9u",
            "U3VtbWFyeUZvcnRQcm90bxIVCg1Gb3J0U3VtbWFyeUlkGAEgASgJEhYKDkxh",
            "c3RNb2RpZmllZE1zGAIgASgDEhAKCExhdGl0dWRlGAMgASgBEhEKCUxvbmdp",
            "dHVkZRgEIAEoASKAAQoSTmVhcmJ5UG9rZW1vblByb3RvEj0KDVBva2VkZXhO",
            "dW1iZXIYASABKA4yJi5Qb2tlbW9uR29BcGkuUHJvdG8uQ3VzdG9tX1Bva2Vt",
            "b25OYW1lEhYKDkRpc3RhbmNlTWV0ZXJzGAIgASgCEhMKC0VuY291bnRlcklk",
            "GAMgASgGKlAKG0dldE1hcE9iamVjdHNPdXRQcm90b1N0YXR1cxIQCgxVTlNF",
            "VF9TVEFUVVMQABILCgdTVUNDRVNTEAESEgoOTE9DQVRJT05fVU5TRVQQAiqc",
            "EAoSQ3VzdG9tX1Bva2Vtb25OYW1lEg0KCU1JU1NJTkdOTxAAEg0KCUJVTEJB",
            "U0FVUhABEgsKB0lWWVNBVVIQAhIMCghWRU5VU0FVUhADEg4KCkNIQVJNRU5E",
            "RVIQBBIOCgpDSEFSTUVMRU9OEAUSDQoJQ0hBUklaQVJEEAYSDAoIU1FVSVJU",
            "TEUQBxINCglXQVJUT1JUTEUQCBINCglCTEFTVE9JU0UQCRIMCghDQVRFUlBJ",
            "RRAKEgsKB01FVEFQT0QQCxIOCgpCVVRURVJGUkVFEAwSCgoGV0VFRExFEA0S",
            "CgoGS0FLVU5BEA4SDAoIQkVFRFJJTEwQDxIKCgZQSURHRVkQEBINCglQSURH",
            "RU9UVE8QERILCgdQSURHRU9UEBISCwoHUkFUVEFUQRATEgwKCFJBVElDQVRF",
            "EBQSCwoHU1BFQVJPVxAVEgoKBkZFQVJPVxAWEgkKBUVLQU5TEBcSCQoFQVJC",
            "T0sQGBILCgdQSUtBQ0hVEBkSCgoGUkFJQ0hVEBoSDQoJU0FORFNIUkVXEBsS",
            "DAoIU0FORExBU0gQHBISCg5OSURPUkFOX0ZFTUFMRRAdEgwKCE5JRE9SSU5B",
            "EB4SDQoJTklET1FVRUVOEB8SEAoMTklET1JBTl9NQUxFECASDAoITklET1JJ",
            "Tk8QIRIMCghOSURPS0lORxAiEgsKB0NMRUZBUlkQIxIMCghDTEVGQUJMRRAk",
            "EgoKBlZVTFBJWBAlEg0KCU5JTkVUQUxFUxAmEg4KCkpJR0dMWVBVRkYQJxIO",
            "CgpXSUdHTFlUVUZGECgSCQoFWlVCQVQQKRIKCgZHT0xCQVQQKhIKCgZPRERJ",
            "U0gQKxIJCgVHTE9PTRAsEg0KCVZJTEVQTFVNRRAtEgkKBVBBUkFTEC4SDAoI",
            "UEFSQVNFQ1QQLxILCgdWRU5PTkFUEDASDAoIVkVOT01PVEgQMRILCgdESUdM",
            "RVRUEDISCwoHRFVHVFJJTxAzEgoKBk1FT1dUSBA0EgsKB1BFUlNJQU4QNRIL",
            "CgdQU1lEVUNLEDYSCwoHR09MRFVDSxA3EgoKBk1BTktFWRA4EgwKCFBSSU1F",
            "QVBFEDkSDQoJR1JPV0xJVEhFEDoSDAoIQVJDQU5JTkUQOxILCgdQT0xJV0FH",
            "EDwSDQoJUE9MSVdISVJMED0SDQoJUE9MSVdSQVRIED4SCAoEQUJSQRA/EgsK",
            "B0tBREFCUkEQQBINCglBTEFLSEFaQU0QQRIKCgZNQUNIT1AQQhILCgdNQUNI",
            "T0tFEEMSCwoHTUFDSEFNUBBEEg4KCkJFTExTUFJPVVQQRRIOCgpXRUVQSU5C",
            "RUxMEEYSDwoLVklDVFJFRUJFTEwQRxINCglURU5UQUNPT0wQSBIOCgpURU5U",
            "QUNSVUVMEEkSCwoHR0VPRFVHRRBKEgwKCEdSQVZFTEVSEEsSCQoFR09MRU0Q",
            "TBIKCgZQT05ZVEEQTRIMCghSQVBJREFTSBBOEgwKCFNMT1dQT0tFEE8SCwoH",
            "U0xPV0JSTxBQEg0KCU1BR05FTUlURRBREgwKCE1BR05FVE9OEFISDQoJRkFS",
            "RkVUQ0hEEFMSCQoFRE9EVU8QVBIKCgZET0RSSU8QVRIICgRTRUVMEFYSCwoH",
            "REVXR09ORxBXEgoKBkdSSU1FUhBYEgcKA01VSxBZEgwKCFNIRUxMREVSEFoS",
            "DAoIQ0xPWVNURVIQWxIKCgZHQVNUTFkQXBILCgdIQVVOVEVSEF0SCgoGR0VO",
            "R0FSEF4SCAoET05JWBBfEgsKB0RST1daRUUQYBIJCgVIWVBOTxBhEgoKBktS",
            "QUJCWRBiEgsKB0tJTkdMRVIQYxILCgdWT0xUT1JCEGQSDQoJRUxFQ1RST0RF",
            "EGUSDQoJRVhFR0dDVVRFEGYSDQoJRVhFR0dVVE9SEGcSCgoGQ1VCT05FEGgS",
            "CwoHTUFST1dBSxBpEg0KCUhJVE1PTkxFRRBqEg4KCkhJVE1PTkNIQU4QaxIN",
            "CglMSUNLSVRVTkcQbBILCgdLT0ZGSU5HEG0SCwoHV0VFWklORxBuEgsKB1JI",
            "WUhPUk4QbxIKCgZSSFlET04QcBILCgdDSEFOU0VZEHESCwoHVEFOR0VMQRBy",
            "Eg4KCktBTkdBU0tIQU4QcxIKCgZIT1JTRUEQdBIKCgZTRUFEUkEQdRILCgdH",
            "T0xERUVOEHYSCwoHU0VBS0lORxB3EgoKBlNUQVJZVRB4EgsKB1NUQVJNSUUQ",
            "eRILCgdNUl9NSU1FEHoSCwoHU0NZVEhFUhB7EggKBEpZTlgQfBIOCgpFTEVD",
            "VEFCVVpaEH0SCgoGTUFHTUFSEH4SCgoGUElOU0lSEH8SCwoGVEFVUk9TEIAB",
            "Eg0KCE1BR0lLQVJQEIEBEg0KCEdZQVJBRE9TEIIBEgsKBkxBUFJBUxCDARIK",
            "CgVESVRUTxCEARIKCgVFRVZFRRCFARINCghWQVBPUkVPThCGARIMCgdKT0xU",
            "RU9OEIcBEgwKB0ZMQVJFT04QiAESDAoHUE9SWUdPThCJARIMCgdPTUFOWVRF",
            "EIoBEgwKB09NQVNUQVIQiwESCwoGS0FCVVRPEIwBEg0KCEtBQlVUT1BTEI0B",
            "Eg8KCkFFUk9EQUNUWUwQjgESDAoHU05PUkxBWBCPARINCghBUlRJQ1VOTxCQ",
            "ARILCgZaQVBET1MQkQESDAoHTU9MVFJFUxCSARIMCgdEUkFUSU5JEJMBEg4K",
            "CURSQUdPTkFJUhCUARIOCglEUkFHT05JVEUQlQESCwoGTUVXVFdPEJYBEggK",
            "A01FVxCXASo+ChBDdXN0b21fVGVhbUNvbG9yEgsKB05FVVRSQUwQABIICgRC",
            "TFVFEAESBwoDUkVEEAISCgoGWUVMTE9XEAMqIwoIRm9ydFR5cGUSBwoDR1lN",
            "EAASDgoKQ0hFQ0tQT0lOVBABUABiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PokemonGoApi.Proto.InventoryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PokemonGoApi.Proto.GetMapObjectsOutProtoStatus), typeof(global::PokemonGoApi.Proto.Custom_PokemonName), typeof(global::PokemonGoApi.Proto.Custom_TeamColor), typeof(global::PokemonGoApi.Proto.FortType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.GetMapObjectsProto), global::PokemonGoApi.Proto.GetMapObjectsProto.Parser, new[]{ "CellId", "SinceTimeMs", "PlayerLat", "PlayerLng" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.GetMapObjectsOutProto), global::PokemonGoApi.Proto.GetMapObjectsOutProto.Parser, new[]{ "MapCell", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.ClientMapCellProto), global::PokemonGoApi.Proto.ClientMapCellProto.Parser, new[]{ "S2CellId", "AsOfTimeMs", "Fort", "SpawnPoint", "DeletedObject", "IsTruncatedList", "FortSummary", "DecimatedSpawnPoint", "NearbyPokemon", "WildPokemon", "CatchablePokemon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.MapPokemonProto), global::PokemonGoApi.Proto.MapPokemonProto.Parser, new[]{ "SpawnPointId", "EncounterId", "PokedexTypeId", "ExpirationTimeMs", "Latitude", "Longitude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.PokemonFortProto), global::PokemonGoApi.Proto.PokemonFortProto.Parser, new[]{ "FortId", "LastModifiedMs", "Latitude", "Longitude", "Enabled", "Team", "GuardPokemonId", "GuardPokemonLevel", "GymPoints", "IsInBattle", "FortType", "CooldownCompleteMs", "Sponsor", "RenderingType", "ActiveFortModifier", "FortLureInfo" }, null, new[]{ typeof(global::PokemonGoApi.Proto.PokemonFortProto.Types.FortSponsor), typeof(global::PokemonGoApi.Proto.PokemonFortProto.Types.FortRenderingType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.PokemonFortProto.Types.Custom_FortLureInfoProto), global::PokemonGoApi.Proto.PokemonFortProto.Types.Custom_FortLureInfoProto.Parser, new[]{ "FortId", "NotSure2", "ActivePokemon", "LureExpiryMs" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.WildPokemonProto), global::PokemonGoApi.Proto.WildPokemonProto.Parser, new[]{ "EncounterId", "LastModifiedMs", "Latitude", "Longitude", "SpawnPointId", "Pokemon", "TimeTillHiddenMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.ClientSpawnPointProto), global::PokemonGoApi.Proto.ClientSpawnPointProto.Parser, new[]{ "Latitude", "Longitude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.PokemonSummaryFortProto), global::PokemonGoApi.Proto.PokemonSummaryFortProto.Parser, new[]{ "FortSummaryId", "LastModifiedMs", "Latitude", "Longitude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.NearbyPokemonProto), global::PokemonGoApi.Proto.NearbyPokemonProto.Parser, new[]{ "PokedexNumber", "DistanceMeters", "EncounterId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  GET MAP OBJECTS
  /// </summary>
  public enum GetMapObjectsOutProtoStatus {
    /// <summary>
    ///  was originally "UNSET" in the app itself
    /// </summary>
    [pbr::OriginalName("UNSET_STATUS")] UnsetStatus = 0,
    [pbr::OriginalName("SUCCESS")] Success = 1,
    [pbr::OriginalName("LOCATION_UNSET")] LocationUnset = 2,
  }

  public enum Custom_PokemonName {
    /// <summary>
    ///  just kidding
    /// </summary>
    [pbr::OriginalName("MISSINGNO")] Missingno = 0,
    [pbr::OriginalName("BULBASAUR")] Bulbasaur = 1,
    [pbr::OriginalName("IVYSAUR")] Ivysaur = 2,
    [pbr::OriginalName("VENUSAUR")] Venusaur = 3,
    [pbr::OriginalName("CHARMENDER")] Charmender = 4,
    [pbr::OriginalName("CHARMELEON")] Charmeleon = 5,
    [pbr::OriginalName("CHARIZARD")] Charizard = 6,
    [pbr::OriginalName("SQUIRTLE")] Squirtle = 7,
    [pbr::OriginalName("WARTORTLE")] Wartortle = 8,
    [pbr::OriginalName("BLASTOISE")] Blastoise = 9,
    [pbr::OriginalName("CATERPIE")] Caterpie = 10,
    [pbr::OriginalName("METAPOD")] Metapod = 11,
    [pbr::OriginalName("BUTTERFREE")] Butterfree = 12,
    [pbr::OriginalName("WEEDLE")] Weedle = 13,
    [pbr::OriginalName("KAKUNA")] Kakuna = 14,
    [pbr::OriginalName("BEEDRILL")] Beedrill = 15,
    [pbr::OriginalName("PIDGEY")] Pidgey = 16,
    [pbr::OriginalName("PIDGEOTTO")] Pidgeotto = 17,
    [pbr::OriginalName("PIDGEOT")] Pidgeot = 18,
    [pbr::OriginalName("RATTATA")] Rattata = 19,
    [pbr::OriginalName("RATICATE")] Raticate = 20,
    [pbr::OriginalName("SPEAROW")] Spearow = 21,
    [pbr::OriginalName("FEAROW")] Fearow = 22,
    [pbr::OriginalName("EKANS")] Ekans = 23,
    [pbr::OriginalName("ARBOK")] Arbok = 24,
    [pbr::OriginalName("PIKACHU")] Pikachu = 25,
    [pbr::OriginalName("RAICHU")] Raichu = 26,
    [pbr::OriginalName("SANDSHREW")] Sandshrew = 27,
    [pbr::OriginalName("SANDLASH")] Sandlash = 28,
    [pbr::OriginalName("NIDORAN_FEMALE")] NidoranFemale = 29,
    [pbr::OriginalName("NIDORINA")] Nidorina = 30,
    [pbr::OriginalName("NIDOQUEEN")] Nidoqueen = 31,
    [pbr::OriginalName("NIDORAN_MALE")] NidoranMale = 32,
    [pbr::OriginalName("NIDORINO")] Nidorino = 33,
    [pbr::OriginalName("NIDOKING")] Nidoking = 34,
    [pbr::OriginalName("CLEFARY")] Clefary = 35,
    [pbr::OriginalName("CLEFABLE")] Clefable = 36,
    [pbr::OriginalName("VULPIX")] Vulpix = 37,
    [pbr::OriginalName("NINETALES")] Ninetales = 38,
    [pbr::OriginalName("JIGGLYPUFF")] Jigglypuff = 39,
    [pbr::OriginalName("WIGGLYTUFF")] Wigglytuff = 40,
    [pbr::OriginalName("ZUBAT")] Zubat = 41,
    [pbr::OriginalName("GOLBAT")] Golbat = 42,
    [pbr::OriginalName("ODDISH")] Oddish = 43,
    [pbr::OriginalName("GLOOM")] Gloom = 44,
    [pbr::OriginalName("VILEPLUME")] Vileplume = 45,
    [pbr::OriginalName("PARAS")] Paras = 46,
    [pbr::OriginalName("PARASECT")] Parasect = 47,
    [pbr::OriginalName("VENONAT")] Venonat = 48,
    [pbr::OriginalName("VENOMOTH")] Venomoth = 49,
    [pbr::OriginalName("DIGLETT")] Diglett = 50,
    [pbr::OriginalName("DUGTRIO")] Dugtrio = 51,
    [pbr::OriginalName("MEOWTH")] Meowth = 52,
    [pbr::OriginalName("PERSIAN")] Persian = 53,
    [pbr::OriginalName("PSYDUCK")] Psyduck = 54,
    [pbr::OriginalName("GOLDUCK")] Golduck = 55,
    [pbr::OriginalName("MANKEY")] Mankey = 56,
    [pbr::OriginalName("PRIMEAPE")] Primeape = 57,
    [pbr::OriginalName("GROWLITHE")] Growlithe = 58,
    [pbr::OriginalName("ARCANINE")] Arcanine = 59,
    [pbr::OriginalName("POLIWAG")] Poliwag = 60,
    [pbr::OriginalName("POLIWHIRL")] Poliwhirl = 61,
    [pbr::OriginalName("POLIWRATH")] Poliwrath = 62,
    [pbr::OriginalName("ABRA")] Abra = 63,
    [pbr::OriginalName("KADABRA")] Kadabra = 64,
    [pbr::OriginalName("ALAKHAZAM")] Alakhazam = 65,
    [pbr::OriginalName("MACHOP")] Machop = 66,
    [pbr::OriginalName("MACHOKE")] Machoke = 67,
    [pbr::OriginalName("MACHAMP")] Machamp = 68,
    [pbr::OriginalName("BELLSPROUT")] Bellsprout = 69,
    [pbr::OriginalName("WEEPINBELL")] Weepinbell = 70,
    [pbr::OriginalName("VICTREEBELL")] Victreebell = 71,
    [pbr::OriginalName("TENTACOOL")] Tentacool = 72,
    [pbr::OriginalName("TENTACRUEL")] Tentacruel = 73,
    [pbr::OriginalName("GEODUGE")] Geoduge = 74,
    [pbr::OriginalName("GRAVELER")] Graveler = 75,
    [pbr::OriginalName("GOLEM")] Golem = 76,
    [pbr::OriginalName("PONYTA")] Ponyta = 77,
    [pbr::OriginalName("RAPIDASH")] Rapidash = 78,
    [pbr::OriginalName("SLOWPOKE")] Slowpoke = 79,
    [pbr::OriginalName("SLOWBRO")] Slowbro = 80,
    [pbr::OriginalName("MAGNEMITE")] Magnemite = 81,
    [pbr::OriginalName("MAGNETON")] Magneton = 82,
    [pbr::OriginalName("FARFETCHD")] Farfetchd = 83,
    [pbr::OriginalName("DODUO")] Doduo = 84,
    [pbr::OriginalName("DODRIO")] Dodrio = 85,
    [pbr::OriginalName("SEEL")] Seel = 86,
    [pbr::OriginalName("DEWGONG")] Dewgong = 87,
    [pbr::OriginalName("GRIMER")] Grimer = 88,
    [pbr::OriginalName("MUK")] Muk = 89,
    [pbr::OriginalName("SHELLDER")] Shellder = 90,
    [pbr::OriginalName("CLOYSTER")] Cloyster = 91,
    [pbr::OriginalName("GASTLY")] Gastly = 92,
    [pbr::OriginalName("HAUNTER")] Haunter = 93,
    [pbr::OriginalName("GENGAR")] Gengar = 94,
    [pbr::OriginalName("ONIX")] Onix = 95,
    [pbr::OriginalName("DROWZEE")] Drowzee = 96,
    [pbr::OriginalName("HYPNO")] Hypno = 97,
    [pbr::OriginalName("KRABBY")] Krabby = 98,
    [pbr::OriginalName("KINGLER")] Kingler = 99,
    [pbr::OriginalName("VOLTORB")] Voltorb = 100,
    [pbr::OriginalName("ELECTRODE")] Electrode = 101,
    [pbr::OriginalName("EXEGGCUTE")] Exeggcute = 102,
    [pbr::OriginalName("EXEGGUTOR")] Exeggutor = 103,
    [pbr::OriginalName("CUBONE")] Cubone = 104,
    [pbr::OriginalName("MAROWAK")] Marowak = 105,
    [pbr::OriginalName("HITMONLEE")] Hitmonlee = 106,
    [pbr::OriginalName("HITMONCHAN")] Hitmonchan = 107,
    [pbr::OriginalName("LICKITUNG")] Lickitung = 108,
    [pbr::OriginalName("KOFFING")] Koffing = 109,
    [pbr::OriginalName("WEEZING")] Weezing = 110,
    [pbr::OriginalName("RHYHORN")] Rhyhorn = 111,
    [pbr::OriginalName("RHYDON")] Rhydon = 112,
    [pbr::OriginalName("CHANSEY")] Chansey = 113,
    [pbr::OriginalName("TANGELA")] Tangela = 114,
    [pbr::OriginalName("KANGASKHAN")] Kangaskhan = 115,
    [pbr::OriginalName("HORSEA")] Horsea = 116,
    [pbr::OriginalName("SEADRA")] Seadra = 117,
    [pbr::OriginalName("GOLDEEN")] Goldeen = 118,
    [pbr::OriginalName("SEAKING")] Seaking = 119,
    [pbr::OriginalName("STARYU")] Staryu = 120,
    [pbr::OriginalName("STARMIE")] Starmie = 121,
    [pbr::OriginalName("MR_MIME")] MrMime = 122,
    [pbr::OriginalName("SCYTHER")] Scyther = 123,
    [pbr::OriginalName("JYNX")] Jynx = 124,
    [pbr::OriginalName("ELECTABUZZ")] Electabuzz = 125,
    [pbr::OriginalName("MAGMAR")] Magmar = 126,
    [pbr::OriginalName("PINSIR")] Pinsir = 127,
    [pbr::OriginalName("TAUROS")] Tauros = 128,
    [pbr::OriginalName("MAGIKARP")] Magikarp = 129,
    [pbr::OriginalName("GYARADOS")] Gyarados = 130,
    [pbr::OriginalName("LAPRAS")] Lapras = 131,
    [pbr::OriginalName("DITTO")] Ditto = 132,
    [pbr::OriginalName("EEVEE")] Eevee = 133,
    [pbr::OriginalName("VAPOREON")] Vaporeon = 134,
    [pbr::OriginalName("JOLTEON")] Jolteon = 135,
    [pbr::OriginalName("FLAREON")] Flareon = 136,
    [pbr::OriginalName("PORYGON")] Porygon = 137,
    [pbr::OriginalName("OMANYTE")] Omanyte = 138,
    [pbr::OriginalName("OMASTAR")] Omastar = 139,
    [pbr::OriginalName("KABUTO")] Kabuto = 140,
    [pbr::OriginalName("KABUTOPS")] Kabutops = 141,
    [pbr::OriginalName("AERODACTYL")] Aerodactyl = 142,
    [pbr::OriginalName("SNORLAX")] Snorlax = 143,
    [pbr::OriginalName("ARTICUNO")] Articuno = 144,
    [pbr::OriginalName("ZAPDOS")] Zapdos = 145,
    [pbr::OriginalName("MOLTRES")] Moltres = 146,
    [pbr::OriginalName("DRATINI")] Dratini = 147,
    [pbr::OriginalName("DRAGONAIR")] Dragonair = 148,
    [pbr::OriginalName("DRAGONITE")] Dragonite = 149,
    [pbr::OriginalName("MEWTWO")] Mewtwo = 150,
    [pbr::OriginalName("MEW")] Mew = 151,
  }

  public enum Custom_TeamColor {
    [pbr::OriginalName("NEUTRAL")] Neutral = 0,
    [pbr::OriginalName("BLUE")] Blue = 1,
    [pbr::OriginalName("RED")] Red = 2,
    [pbr::OriginalName("YELLOW")] Yellow = 3,
  }

  public enum FortType {
    [pbr::OriginalName("GYM")] Gym = 0,
    /// <summary>
    /// Pokestop
    /// </summary>
    [pbr::OriginalName("CHECKPOINT")] Checkpoint = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  The get map objects request object
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetMapObjectsProto : pb::IMessage<GetMapObjectsProto> {
    private static readonly pb::MessageParser<GetMapObjectsProto> _parser = new pb::MessageParser<GetMapObjectsProto>(() => new GetMapObjectsProto());
    public static pb::MessageParser<GetMapObjectsProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.MapReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetMapObjectsProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetMapObjectsProto(GetMapObjectsProto other) : this() {
      cellId_ = other.cellId_;
      sinceTimeMs_ = other.sinceTimeMs_;
      playerLat_ = other.playerLat_;
      playerLng_ = other.playerLng_;
    }

    public GetMapObjectsProto Clone() {
      return new GetMapObjectsProto(this);
    }

    /// <summary>Field number for the "CellId" field.</summary>
    public const int CellIdFieldNumber = 1;
    private pb::ByteString cellId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Workaround to get rid of double uint64/int64 readonly mode
    /// </summary>
    public pb::ByteString CellId {
      get { return cellId_; }
      set {
        cellId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SinceTimeMs" field.</summary>
    public const int SinceTimeMsFieldNumber = 2;
    private pb::ByteString sinceTimeMs_ = pb::ByteString.Empty;
    public pb::ByteString SinceTimeMs {
      get { return sinceTimeMs_; }
      set {
        sinceTimeMs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerLat" field.</summary>
    public const int PlayerLatFieldNumber = 3;
    private double playerLat_;
    public double PlayerLat {
      get { return playerLat_; }
      set {
        playerLat_ = value;
      }
    }

    /// <summary>Field number for the "PlayerLng" field.</summary>
    public const int PlayerLngFieldNumber = 4;
    private double playerLng_;
    public double PlayerLng {
      get { return playerLng_; }
      set {
        playerLng_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetMapObjectsProto);
    }

    public bool Equals(GetMapObjectsProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CellId != other.CellId) return false;
      if (SinceTimeMs != other.SinceTimeMs) return false;
      if (PlayerLat != other.PlayerLat) return false;
      if (PlayerLng != other.PlayerLng) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (CellId.Length != 0) hash ^= CellId.GetHashCode();
      if (SinceTimeMs.Length != 0) hash ^= SinceTimeMs.GetHashCode();
      if (PlayerLat != 0D) hash ^= PlayerLat.GetHashCode();
      if (PlayerLng != 0D) hash ^= PlayerLng.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CellId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CellId);
      }
      if (SinceTimeMs.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SinceTimeMs);
      }
      if (PlayerLat != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PlayerLat);
      }
      if (PlayerLng != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PlayerLng);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CellId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CellId);
      }
      if (SinceTimeMs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SinceTimeMs);
      }
      if (PlayerLat != 0D) {
        size += 1 + 8;
      }
      if (PlayerLng != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(GetMapObjectsProto other) {
      if (other == null) {
        return;
      }
      if (other.CellId.Length != 0) {
        CellId = other.CellId;
      }
      if (other.SinceTimeMs.Length != 0) {
        SinceTimeMs = other.SinceTimeMs;
      }
      if (other.PlayerLat != 0D) {
        PlayerLat = other.PlayerLat;
      }
      if (other.PlayerLng != 0D) {
        PlayerLng = other.PlayerLng;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CellId = input.ReadBytes();
            break;
          }
          case 18: {
            SinceTimeMs = input.ReadBytes();
            break;
          }
          case 25: {
            PlayerLat = input.ReadDouble();
            break;
          }
          case 33: {
            PlayerLng = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The get map objects response object
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetMapObjectsOutProto : pb::IMessage<GetMapObjectsOutProto> {
    private static readonly pb::MessageParser<GetMapObjectsOutProto> _parser = new pb::MessageParser<GetMapObjectsOutProto>(() => new GetMapObjectsOutProto());
    public static pb::MessageParser<GetMapObjectsOutProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.MapReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetMapObjectsOutProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetMapObjectsOutProto(GetMapObjectsOutProto other) : this() {
      mapCell_ = other.mapCell_.Clone();
      status_ = other.status_;
    }

    public GetMapObjectsOutProto Clone() {
      return new GetMapObjectsOutProto(this);
    }

    /// <summary>Field number for the "MapCell" field.</summary>
    public const int MapCellFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PokemonGoApi.Proto.ClientMapCellProto> _repeated_mapCell_codec
        = pb::FieldCodec.ForMessage(10, global::PokemonGoApi.Proto.ClientMapCellProto.Parser);
    private readonly pbc::RepeatedField<global::PokemonGoApi.Proto.ClientMapCellProto> mapCell_ = new pbc::RepeatedField<global::PokemonGoApi.Proto.ClientMapCellProto>();
    public pbc::RepeatedField<global::PokemonGoApi.Proto.ClientMapCellProto> MapCell {
      get { return mapCell_; }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::PokemonGoApi.Proto.GetMapObjectsOutProtoStatus status_ = 0;
    public global::PokemonGoApi.Proto.GetMapObjectsOutProtoStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetMapObjectsOutProto);
    }

    public bool Equals(GetMapObjectsOutProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapCell_.Equals(other.mapCell_)) return false;
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapCell_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mapCell_.WriteTo(output, _repeated_mapCell_codec);
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += mapCell_.CalculateSize(_repeated_mapCell_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    public void MergeFrom(GetMapObjectsOutProto other) {
      if (other == null) {
        return;
      }
      mapCell_.Add(other.mapCell_);
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mapCell_.AddEntriesFrom(input, _repeated_mapCell_codec);
            break;
          }
          case 16: {
            status_ = (global::PokemonGoApi.Proto.GetMapObjectsOutProtoStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A cell is a geographical "zone" containing objects like pokemon, gyms, and pokestops
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClientMapCellProto : pb::IMessage<ClientMapCellProto> {
    private static readonly pb::MessageParser<ClientMapCellProto> _parser = new pb::MessageParser<ClientMapCellProto>(() => new ClientMapCellProto());
    public static pb::MessageParser<ClientMapCellProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.MapReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ClientMapCellProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ClientMapCellProto(ClientMapCellProto other) : this() {
      s2CellId_ = other.s2CellId_;
      asOfTimeMs_ = other.asOfTimeMs_;
      fort_ = other.fort_.Clone();
      spawnPoint_ = other.spawnPoint_.Clone();
      deletedObject_ = other.deletedObject_.Clone();
      isTruncatedList_ = other.isTruncatedList_;
      fortSummary_ = other.fortSummary_.Clone();
      decimatedSpawnPoint_ = other.decimatedSpawnPoint_.Clone();
      nearbyPokemon_ = other.nearbyPokemon_.Clone();
      wildPokemon_ = other.wildPokemon_.Clone();
      catchablePokemon_ = other.catchablePokemon_.Clone();
    }

    public ClientMapCellProto Clone() {
      return new ClientMapCellProto(this);
    }

    /// <summary>Field number for the "S2CellId" field.</summary>
    public const int S2CellIdFieldNumber = 1;
    private ulong s2CellId_;
    /// <summary>
    ///  S2 geographic area that the cell covers (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
    /// </summary>
    public ulong S2CellId {
      get { return s2CellId_; }
      set {
        s2CellId_ = value;
      }
    }

    /// <summary>Field number for the "AsOfTimeMs" field.</summary>
    public const int AsOfTimeMsFieldNumber = 2;
    private long asOfTimeMs_;
    /// <summary>
    ///  current timestamp
    /// </summary>
    public long AsOfTimeMs {
      get { return asOfTimeMs_; }
      set {
        asOfTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "Fort" field.</summary>
    public const int FortFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PokemonGoApi.Proto.PokemonFortProto> _repeated_fort_codec
        = pb::FieldCodec.ForMessage(26, global::PokemonGoApi.Proto.PokemonFortProto.Parser);
    private readonly pbc::RepeatedField<global::PokemonGoApi.Proto.PokemonFortProto> fort_ = new pbc::RepeatedField<global::PokemonGoApi.Proto.PokemonFortProto>();
    public pbc::RepeatedField<global::PokemonGoApi.Proto.PokemonFortProto> Fort {
      get { return fort_; }
    }

    /// <summary>Field number for the "SpawnPoint" field.</summary>
    public const int SpawnPointFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PokemonGoApi.Proto.ClientSpawnPointProto> _repeated_spawnPoint_codec
        = pb::FieldCodec.ForMessage(34, global::PokemonGoApi.Proto.ClientSpawnPointProto.Parser);
    private readonly pbc::RepeatedField<global::PokemonGoApi.Proto.ClientSpawnPointProto> spawnPoint_ = new pbc::RepeatedField<global::PokemonGoApi.Proto.ClientSpawnPointProto>();
    public pbc::RepeatedField<global::PokemonGoApi.Proto.ClientSpawnPointProto> SpawnPoint {
      get { return spawnPoint_; }
    }

    /// <summary>Field number for the "DeletedObject" field.</summary>
    public const int DeletedObjectFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_deletedObject_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> deletedObject_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> DeletedObject {
      get { return deletedObject_; }
    }

    /// <summary>Field number for the "IsTruncatedList" field.</summary>
    public const int IsTruncatedListFieldNumber = 7;
    private bool isTruncatedList_;
    public bool IsTruncatedList {
      get { return isTruncatedList_; }
      set {
        isTruncatedList_ = value;
      }
    }

    /// <summary>Field number for the "FortSummary" field.</summary>
    public const int FortSummaryFieldNumber = 8;
    private static readonly pb::FieldCodec<global::PokemonGoApi.Proto.PokemonSummaryFortProto> _repeated_fortSummary_codec
        = pb::FieldCodec.ForMessage(66, global::PokemonGoApi.Proto.PokemonSummaryFortProto.Parser);
    private readonly pbc::RepeatedField<global::PokemonGoApi.Proto.PokemonSummaryFortProto> fortSummary_ = new pbc::RepeatedField<global::PokemonGoApi.Proto.PokemonSummaryFortProto>();
    public pbc::RepeatedField<global::PokemonGoApi.Proto.PokemonSummaryFortProto> FortSummary {
      get { return fortSummary_; }
    }

    /// <summary>Field number for the "DecimatedSpawnPoint" field.</summary>
    public const int DecimatedSpawnPointFieldNumber = 9;
    private static readonly pb::FieldCodec<global::PokemonGoApi.Proto.ClientSpawnPointProto> _repeated_decimatedSpawnPoint_codec
        = pb::FieldCodec.ForMessage(74, global::PokemonGoApi.Proto.ClientSpawnPointProto.Parser);
    private readonly pbc::RepeatedField<global::PokemonGoApi.Proto.ClientSpawnPointProto> decimatedSpawnPoint_ = new pbc::RepeatedField<global::PokemonGoApi.Proto.ClientSpawnPointProto>();
    public pbc::RepeatedField<global::PokemonGoApi.Proto.ClientSpawnPointProto> DecimatedSpawnPoint {
      get { return decimatedSpawnPoint_; }
    }

    /// <summary>Field number for the "NearbyPokemon" field.</summary>
    public const int NearbyPokemonFieldNumber = 11;
    private static readonly pb::FieldCodec<global::PokemonGoApi.Proto.NearbyPokemonProto> _repeated_nearbyPokemon_codec
        = pb::FieldCodec.ForMessage(90, global::PokemonGoApi.Proto.NearbyPokemonProto.Parser);
    private readonly pbc::RepeatedField<global::PokemonGoApi.Proto.NearbyPokemonProto> nearbyPokemon_ = new pbc::RepeatedField<global::PokemonGoApi.Proto.NearbyPokemonProto>();
    /// <summary>
    ///  Pokemon farther away than 2 "steps", but still in the area (3 "steps" away)
    /// </summary>
    public pbc::RepeatedField<global::PokemonGoApi.Proto.NearbyPokemonProto> NearbyPokemon {
      get { return nearbyPokemon_; }
    }

    /// <summary>Field number for the "WildPokemon" field.</summary>
    public const int WildPokemonFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PokemonGoApi.Proto.WildPokemonProto> _repeated_wildPokemon_codec
        = pb::FieldCodec.ForMessage(42, global::PokemonGoApi.Proto.WildPokemonProto.Parser);
    private readonly pbc::RepeatedField<global::PokemonGoApi.Proto.WildPokemonProto> wildPokemon_ = new pbc::RepeatedField<global::PokemonGoApi.Proto.WildPokemonProto>();
    /// <summary>
    ///  Each pokemon within 2 "steps" or closer will have a WildPokemonProto and MapPokemonProto object
    /// </summary>
    public pbc::RepeatedField<global::PokemonGoApi.Proto.WildPokemonProto> WildPokemon {
      get { return wildPokemon_; }
    }

    /// <summary>Field number for the "CatchablePokemon" field.</summary>
    public const int CatchablePokemonFieldNumber = 10;
    private static readonly pb::FieldCodec<global::PokemonGoApi.Proto.MapPokemonProto> _repeated_catchablePokemon_codec
        = pb::FieldCodec.ForMessage(82, global::PokemonGoApi.Proto.MapPokemonProto.Parser);
    private readonly pbc::RepeatedField<global::PokemonGoApi.Proto.MapPokemonProto> catchablePokemon_ = new pbc::RepeatedField<global::PokemonGoApi.Proto.MapPokemonProto>();
    public pbc::RepeatedField<global::PokemonGoApi.Proto.MapPokemonProto> CatchablePokemon {
      get { return catchablePokemon_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ClientMapCellProto);
    }

    public bool Equals(ClientMapCellProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (S2CellId != other.S2CellId) return false;
      if (AsOfTimeMs != other.AsOfTimeMs) return false;
      if(!fort_.Equals(other.fort_)) return false;
      if(!spawnPoint_.Equals(other.spawnPoint_)) return false;
      if(!deletedObject_.Equals(other.deletedObject_)) return false;
      if (IsTruncatedList != other.IsTruncatedList) return false;
      if(!fortSummary_.Equals(other.fortSummary_)) return false;
      if(!decimatedSpawnPoint_.Equals(other.decimatedSpawnPoint_)) return false;
      if(!nearbyPokemon_.Equals(other.nearbyPokemon_)) return false;
      if(!wildPokemon_.Equals(other.wildPokemon_)) return false;
      if(!catchablePokemon_.Equals(other.catchablePokemon_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (S2CellId != 0UL) hash ^= S2CellId.GetHashCode();
      if (AsOfTimeMs != 0L) hash ^= AsOfTimeMs.GetHashCode();
      hash ^= fort_.GetHashCode();
      hash ^= spawnPoint_.GetHashCode();
      hash ^= deletedObject_.GetHashCode();
      if (IsTruncatedList != false) hash ^= IsTruncatedList.GetHashCode();
      hash ^= fortSummary_.GetHashCode();
      hash ^= decimatedSpawnPoint_.GetHashCode();
      hash ^= nearbyPokemon_.GetHashCode();
      hash ^= wildPokemon_.GetHashCode();
      hash ^= catchablePokemon_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (S2CellId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(S2CellId);
      }
      if (AsOfTimeMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AsOfTimeMs);
      }
      fort_.WriteTo(output, _repeated_fort_codec);
      spawnPoint_.WriteTo(output, _repeated_spawnPoint_codec);
      wildPokemon_.WriteTo(output, _repeated_wildPokemon_codec);
      deletedObject_.WriteTo(output, _repeated_deletedObject_codec);
      if (IsTruncatedList != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsTruncatedList);
      }
      fortSummary_.WriteTo(output, _repeated_fortSummary_codec);
      decimatedSpawnPoint_.WriteTo(output, _repeated_decimatedSpawnPoint_codec);
      catchablePokemon_.WriteTo(output, _repeated_catchablePokemon_codec);
      nearbyPokemon_.WriteTo(output, _repeated_nearbyPokemon_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (S2CellId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(S2CellId);
      }
      if (AsOfTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AsOfTimeMs);
      }
      size += fort_.CalculateSize(_repeated_fort_codec);
      size += spawnPoint_.CalculateSize(_repeated_spawnPoint_codec);
      size += deletedObject_.CalculateSize(_repeated_deletedObject_codec);
      if (IsTruncatedList != false) {
        size += 1 + 1;
      }
      size += fortSummary_.CalculateSize(_repeated_fortSummary_codec);
      size += decimatedSpawnPoint_.CalculateSize(_repeated_decimatedSpawnPoint_codec);
      size += nearbyPokemon_.CalculateSize(_repeated_nearbyPokemon_codec);
      size += wildPokemon_.CalculateSize(_repeated_wildPokemon_codec);
      size += catchablePokemon_.CalculateSize(_repeated_catchablePokemon_codec);
      return size;
    }

    public void MergeFrom(ClientMapCellProto other) {
      if (other == null) {
        return;
      }
      if (other.S2CellId != 0UL) {
        S2CellId = other.S2CellId;
      }
      if (other.AsOfTimeMs != 0L) {
        AsOfTimeMs = other.AsOfTimeMs;
      }
      fort_.Add(other.fort_);
      spawnPoint_.Add(other.spawnPoint_);
      deletedObject_.Add(other.deletedObject_);
      if (other.IsTruncatedList != false) {
        IsTruncatedList = other.IsTruncatedList;
      }
      fortSummary_.Add(other.fortSummary_);
      decimatedSpawnPoint_.Add(other.decimatedSpawnPoint_);
      nearbyPokemon_.Add(other.nearbyPokemon_);
      wildPokemon_.Add(other.wildPokemon_);
      catchablePokemon_.Add(other.catchablePokemon_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            S2CellId = input.ReadUInt64();
            break;
          }
          case 16: {
            AsOfTimeMs = input.ReadInt64();
            break;
          }
          case 26: {
            fort_.AddEntriesFrom(input, _repeated_fort_codec);
            break;
          }
          case 34: {
            spawnPoint_.AddEntriesFrom(input, _repeated_spawnPoint_codec);
            break;
          }
          case 42: {
            wildPokemon_.AddEntriesFrom(input, _repeated_wildPokemon_codec);
            break;
          }
          case 50: {
            deletedObject_.AddEntriesFrom(input, _repeated_deletedObject_codec);
            break;
          }
          case 56: {
            IsTruncatedList = input.ReadBool();
            break;
          }
          case 66: {
            fortSummary_.AddEntriesFrom(input, _repeated_fortSummary_codec);
            break;
          }
          case 74: {
            decimatedSpawnPoint_.AddEntriesFrom(input, _repeated_decimatedSpawnPoint_codec);
            break;
          }
          case 82: {
            catchablePokemon_.AddEntriesFrom(input, _repeated_catchablePokemon_codec);
            break;
          }
          case 90: {
            nearbyPokemon_.AddEntriesFrom(input, _repeated_nearbyPokemon_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapPokemonProto : pb::IMessage<MapPokemonProto> {
    private static readonly pb::MessageParser<MapPokemonProto> _parser = new pb::MessageParser<MapPokemonProto>(() => new MapPokemonProto());
    public static pb::MessageParser<MapPokemonProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.MapReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MapPokemonProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MapPokemonProto(MapPokemonProto other) : this() {
      spawnPointId_ = other.spawnPointId_;
      encounterId_ = other.encounterId_;
      pokedexTypeId_ = other.pokedexTypeId_;
      expirationTimeMs_ = other.expirationTimeMs_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    public MapPokemonProto Clone() {
      return new MapPokemonProto(this);
    }

    /// <summary>Field number for the "SpawnPointId" field.</summary>
    public const int SpawnPointIdFieldNumber = 1;
    private string spawnPointId_ = "";
    /// <summary>
    ///  S2 geographic area of the spawn point (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
    /// </summary>
    public string SpawnPointId {
      get { return spawnPointId_; }
      set {
        spawnPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EncounterId" field.</summary>
    public const int EncounterIdFieldNumber = 2;
    private ulong encounterId_;
    public ulong EncounterId {
      get { return encounterId_; }
      set {
        encounterId_ = value;
      }
    }

    /// <summary>Field number for the "PokedexTypeId" field.</summary>
    public const int PokedexTypeIdFieldNumber = 3;
    private global::PokemonGoApi.Proto.Custom_PokemonName pokedexTypeId_ = 0;
    public global::PokemonGoApi.Proto.Custom_PokemonName PokedexTypeId {
      get { return pokedexTypeId_; }
      set {
        pokedexTypeId_ = value;
      }
    }

    /// <summary>Field number for the "ExpirationTimeMs" field.</summary>
    public const int ExpirationTimeMsFieldNumber = 4;
    private long expirationTimeMs_;
    /// <summary>
    ///  After this timestamp, the pokemon will be gone
    /// </summary>
    public long ExpirationTimeMs {
      get { return expirationTimeMs_; }
      set {
        expirationTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "Latitude" field.</summary>
    public const int LatitudeFieldNumber = 5;
    private double latitude_;
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "Longitude" field.</summary>
    public const int LongitudeFieldNumber = 6;
    private double longitude_;
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as MapPokemonProto);
    }

    public bool Equals(MapPokemonProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpawnPointId != other.SpawnPointId) return false;
      if (EncounterId != other.EncounterId) return false;
      if (PokedexTypeId != other.PokedexTypeId) return false;
      if (ExpirationTimeMs != other.ExpirationTimeMs) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SpawnPointId.Length != 0) hash ^= SpawnPointId.GetHashCode();
      if (EncounterId != 0UL) hash ^= EncounterId.GetHashCode();
      if (PokedexTypeId != 0) hash ^= PokedexTypeId.GetHashCode();
      if (ExpirationTimeMs != 0L) hash ^= ExpirationTimeMs.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SpawnPointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SpawnPointId);
      }
      if (EncounterId != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(EncounterId);
      }
      if (PokedexTypeId != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PokedexTypeId);
      }
      if (ExpirationTimeMs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpirationTimeMs);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Longitude);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SpawnPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpawnPointId);
      }
      if (EncounterId != 0UL) {
        size += 1 + 8;
      }
      if (PokedexTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokedexTypeId);
      }
      if (ExpirationTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTimeMs);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(MapPokemonProto other) {
      if (other == null) {
        return;
      }
      if (other.SpawnPointId.Length != 0) {
        SpawnPointId = other.SpawnPointId;
      }
      if (other.EncounterId != 0UL) {
        EncounterId = other.EncounterId;
      }
      if (other.PokedexTypeId != 0) {
        PokedexTypeId = other.PokedexTypeId;
      }
      if (other.ExpirationTimeMs != 0L) {
        ExpirationTimeMs = other.ExpirationTimeMs;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SpawnPointId = input.ReadString();
            break;
          }
          case 17: {
            EncounterId = input.ReadFixed64();
            break;
          }
          case 24: {
            pokedexTypeId_ = (global::PokemonGoApi.Proto.Custom_PokemonName) input.ReadEnum();
            break;
          }
          case 32: {
            ExpirationTimeMs = input.ReadInt64();
            break;
          }
          case 41: {
            Latitude = input.ReadDouble();
            break;
          }
          case 49: {
            Longitude = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A "fort" is the internal name for a gym or pokestop point of interest
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PokemonFortProto : pb::IMessage<PokemonFortProto> {
    private static readonly pb::MessageParser<PokemonFortProto> _parser = new pb::MessageParser<PokemonFortProto>(() => new PokemonFortProto());
    public static pb::MessageParser<PokemonFortProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.MapReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PokemonFortProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PokemonFortProto(PokemonFortProto other) : this() {
      fortId_ = other.fortId_;
      lastModifiedMs_ = other.lastModifiedMs_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      enabled_ = other.enabled_;
      team_ = other.team_;
      guardPokemonId_ = other.guardPokemonId_;
      guardPokemonLevel_ = other.guardPokemonLevel_;
      gymPoints_ = other.gymPoints_;
      isInBattle_ = other.isInBattle_;
      fortType_ = other.fortType_;
      cooldownCompleteMs_ = other.cooldownCompleteMs_;
      sponsor_ = other.sponsor_;
      renderingType_ = other.renderingType_;
      activeFortModifier_ = other.activeFortModifier_;
      FortLureInfo = other.fortLureInfo_ != null ? other.FortLureInfo.Clone() : null;
    }

    public PokemonFortProto Clone() {
      return new PokemonFortProto(this);
    }

    /// <summary>Field number for the "FortId" field.</summary>
    public const int FortIdFieldNumber = 1;
    private string fortId_ = "";
    public string FortId {
      get { return fortId_; }
      set {
        fortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastModifiedMs" field.</summary>
    public const int LastModifiedMsFieldNumber = 2;
    private long lastModifiedMs_;
    public long LastModifiedMs {
      get { return lastModifiedMs_; }
      set {
        lastModifiedMs_ = value;
      }
    }

    /// <summary>Field number for the "Latitude" field.</summary>
    public const int LatitudeFieldNumber = 3;
    private double latitude_;
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "Longitude" field.</summary>
    public const int LongitudeFieldNumber = 4;
    private double longitude_;
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "Enabled" field.</summary>
    public const int EnabledFieldNumber = 8;
    private bool enabled_;
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "Team" field.</summary>
    public const int TeamFieldNumber = 5;
    private global::PokemonGoApi.Proto.Custom_TeamColor team_ = 0;
    /// <summary>
    ///  Team that owns the gym
    /// </summary>
    public global::PokemonGoApi.Proto.Custom_TeamColor Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "GuardPokemonId" field.</summary>
    public const int GuardPokemonIdFieldNumber = 6;
    private global::PokemonGoApi.Proto.Custom_PokemonName guardPokemonId_ = 0;
    /// <summary>
    ///  Highest CP Pokemon at the gym
    /// </summary>
    public global::PokemonGoApi.Proto.Custom_PokemonName GuardPokemonId {
      get { return guardPokemonId_; }
      set {
        guardPokemonId_ = value;
      }
    }

    /// <summary>Field number for the "GuardPokemonLevel" field.</summary>
    public const int GuardPokemonLevelFieldNumber = 7;
    private int guardPokemonLevel_;
    public int GuardPokemonLevel {
      get { return guardPokemonLevel_; }
      set {
        guardPokemonLevel_ = value;
      }
    }

    /// <summary>Field number for the "GymPoints" field.</summary>
    public const int GymPointsFieldNumber = 10;
    private long gymPoints_;
    /// <summary>
    ///  Prestigate / experience of the gym
    /// </summary>
    public long GymPoints {
      get { return gymPoints_; }
      set {
        gymPoints_ = value;
      }
    }

    /// <summary>Field number for the "IsInBattle" field.</summary>
    public const int IsInBattleFieldNumber = 11;
    private bool isInBattle_;
    /// <summary>
    ///  Whether someone is battling at the gym currently
    /// </summary>
    public bool IsInBattle {
      get { return isInBattle_; }
      set {
        isInBattle_ = value;
      }
    }

    /// <summary>Field number for the "FortType" field.</summary>
    public const int FortTypeFieldNumber = 9;
    private global::PokemonGoApi.Proto.FortType fortType_ = 0;
    /// <summary>
    ///  If 1, this is a pokestop
    /// </summary>
    public global::PokemonGoApi.Proto.FortType FortType {
      get { return fortType_; }
      set {
        fortType_ = value;
      }
    }

    /// <summary>Field number for the "CooldownCompleteMs" field.</summary>
    public const int CooldownCompleteMsFieldNumber = 14;
    private long cooldownCompleteMs_;
    /// <summary>
    ///  Timestamp when the pokestop can be activated again to get items / xp
    /// </summary>
    public long CooldownCompleteMs {
      get { return cooldownCompleteMs_; }
      set {
        cooldownCompleteMs_ = value;
      }
    }

    /// <summary>Field number for the "Sponsor" field.</summary>
    public const int SponsorFieldNumber = 15;
    private global::PokemonGoApi.Proto.PokemonFortProto.Types.FortSponsor sponsor_ = 0;
    public global::PokemonGoApi.Proto.PokemonFortProto.Types.FortSponsor Sponsor {
      get { return sponsor_; }
      set {
        sponsor_ = value;
      }
    }

    /// <summary>Field number for the "RenderingType" field.</summary>
    public const int RenderingTypeFieldNumber = 16;
    private global::PokemonGoApi.Proto.PokemonFortProto.Types.FortRenderingType renderingType_ = 0;
    public global::PokemonGoApi.Proto.PokemonFortProto.Types.FortRenderingType RenderingType {
      get { return renderingType_; }
      set {
        renderingType_ = value;
      }
    }

    /// <summary>Field number for the "ActiveFortModifier" field.</summary>
    public const int ActiveFortModifierFieldNumber = 12;
    private pb::ByteString activeFortModifier_ = pb::ByteString.Empty;
    /// <summary>
    ///  Might represent the type of item applied to the pokestop, right only lures can be applied
    /// </summary>
    public pb::ByteString ActiveFortModifier {
      get { return activeFortModifier_; }
      set {
        activeFortModifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FortLureInfo" field.</summary>
    public const int FortLureInfoFieldNumber = 13;
    private global::PokemonGoApi.Proto.PokemonFortProto.Types.Custom_FortLureInfoProto fortLureInfo_;
    public global::PokemonGoApi.Proto.PokemonFortProto.Types.Custom_FortLureInfoProto FortLureInfo {
      get { return fortLureInfo_; }
      set {
        fortLureInfo_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PokemonFortProto);
    }

    public bool Equals(PokemonFortProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FortId != other.FortId) return false;
      if (LastModifiedMs != other.LastModifiedMs) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (Enabled != other.Enabled) return false;
      if (Team != other.Team) return false;
      if (GuardPokemonId != other.GuardPokemonId) return false;
      if (GuardPokemonLevel != other.GuardPokemonLevel) return false;
      if (GymPoints != other.GymPoints) return false;
      if (IsInBattle != other.IsInBattle) return false;
      if (FortType != other.FortType) return false;
      if (CooldownCompleteMs != other.CooldownCompleteMs) return false;
      if (Sponsor != other.Sponsor) return false;
      if (RenderingType != other.RenderingType) return false;
      if (ActiveFortModifier != other.ActiveFortModifier) return false;
      if (!object.Equals(FortLureInfo, other.FortLureInfo)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FortId.Length != 0) hash ^= FortId.GetHashCode();
      if (LastModifiedMs != 0L) hash ^= LastModifiedMs.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (GuardPokemonId != 0) hash ^= GuardPokemonId.GetHashCode();
      if (GuardPokemonLevel != 0) hash ^= GuardPokemonLevel.GetHashCode();
      if (GymPoints != 0L) hash ^= GymPoints.GetHashCode();
      if (IsInBattle != false) hash ^= IsInBattle.GetHashCode();
      if (FortType != 0) hash ^= FortType.GetHashCode();
      if (CooldownCompleteMs != 0L) hash ^= CooldownCompleteMs.GetHashCode();
      if (Sponsor != 0) hash ^= Sponsor.GetHashCode();
      if (RenderingType != 0) hash ^= RenderingType.GetHashCode();
      if (ActiveFortModifier.Length != 0) hash ^= ActiveFortModifier.GetHashCode();
      if (fortLureInfo_ != null) hash ^= FortLureInfo.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FortId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FortId);
      }
      if (LastModifiedMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastModifiedMs);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Longitude);
      }
      if (Team != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Team);
      }
      if (GuardPokemonId != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) GuardPokemonId);
      }
      if (GuardPokemonLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GuardPokemonLevel);
      }
      if (Enabled != false) {
        output.WriteRawTag(64);
        output.WriteBool(Enabled);
      }
      if (FortType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) FortType);
      }
      if (GymPoints != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(GymPoints);
      }
      if (IsInBattle != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsInBattle);
      }
      if (ActiveFortModifier.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(ActiveFortModifier);
      }
      if (fortLureInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(FortLureInfo);
      }
      if (CooldownCompleteMs != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(CooldownCompleteMs);
      }
      if (Sponsor != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Sponsor);
      }
      if (RenderingType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) RenderingType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FortId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FortId);
      }
      if (LastModifiedMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModifiedMs);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Team);
      }
      if (GuardPokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GuardPokemonId);
      }
      if (GuardPokemonLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuardPokemonLevel);
      }
      if (GymPoints != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GymPoints);
      }
      if (IsInBattle != false) {
        size += 1 + 1;
      }
      if (FortType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FortType);
      }
      if (CooldownCompleteMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CooldownCompleteMs);
      }
      if (Sponsor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sponsor);
      }
      if (RenderingType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RenderingType);
      }
      if (ActiveFortModifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ActiveFortModifier);
      }
      if (fortLureInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FortLureInfo);
      }
      return size;
    }

    public void MergeFrom(PokemonFortProto other) {
      if (other == null) {
        return;
      }
      if (other.FortId.Length != 0) {
        FortId = other.FortId;
      }
      if (other.LastModifiedMs != 0L) {
        LastModifiedMs = other.LastModifiedMs;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.GuardPokemonId != 0) {
        GuardPokemonId = other.GuardPokemonId;
      }
      if (other.GuardPokemonLevel != 0) {
        GuardPokemonLevel = other.GuardPokemonLevel;
      }
      if (other.GymPoints != 0L) {
        GymPoints = other.GymPoints;
      }
      if (other.IsInBattle != false) {
        IsInBattle = other.IsInBattle;
      }
      if (other.FortType != 0) {
        FortType = other.FortType;
      }
      if (other.CooldownCompleteMs != 0L) {
        CooldownCompleteMs = other.CooldownCompleteMs;
      }
      if (other.Sponsor != 0) {
        Sponsor = other.Sponsor;
      }
      if (other.RenderingType != 0) {
        RenderingType = other.RenderingType;
      }
      if (other.ActiveFortModifier.Length != 0) {
        ActiveFortModifier = other.ActiveFortModifier;
      }
      if (other.fortLureInfo_ != null) {
        if (fortLureInfo_ == null) {
          fortLureInfo_ = new global::PokemonGoApi.Proto.PokemonFortProto.Types.Custom_FortLureInfoProto();
        }
        FortLureInfo.MergeFrom(other.FortLureInfo);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FortId = input.ReadString();
            break;
          }
          case 16: {
            LastModifiedMs = input.ReadInt64();
            break;
          }
          case 25: {
            Latitude = input.ReadDouble();
            break;
          }
          case 33: {
            Longitude = input.ReadDouble();
            break;
          }
          case 40: {
            team_ = (global::PokemonGoApi.Proto.Custom_TeamColor) input.ReadEnum();
            break;
          }
          case 48: {
            guardPokemonId_ = (global::PokemonGoApi.Proto.Custom_PokemonName) input.ReadEnum();
            break;
          }
          case 56: {
            GuardPokemonLevel = input.ReadInt32();
            break;
          }
          case 64: {
            Enabled = input.ReadBool();
            break;
          }
          case 72: {
            fortType_ = (global::PokemonGoApi.Proto.FortType) input.ReadEnum();
            break;
          }
          case 80: {
            GymPoints = input.ReadInt64();
            break;
          }
          case 88: {
            IsInBattle = input.ReadBool();
            break;
          }
          case 98: {
            ActiveFortModifier = input.ReadBytes();
            break;
          }
          case 106: {
            if (fortLureInfo_ == null) {
              fortLureInfo_ = new global::PokemonGoApi.Proto.PokemonFortProto.Types.Custom_FortLureInfoProto();
            }
            input.ReadMessage(fortLureInfo_);
            break;
          }
          case 112: {
            CooldownCompleteMs = input.ReadInt64();
            break;
          }
          case 120: {
            sponsor_ = (global::PokemonGoApi.Proto.PokemonFortProto.Types.FortSponsor) input.ReadEnum();
            break;
          }
          case 128: {
            renderingType_ = (global::PokemonGoApi.Proto.PokemonFortProto.Types.FortRenderingType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PokemonFortProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum FortSponsor {
        /// <summary>
        ///  was originally "UNSET" in the app itself
        /// </summary>
        [pbr::OriginalName("UNSET_SPONSOR")] UnsetSponsor = 0,
        [pbr::OriginalName("MCDONALDS")] Mcdonalds = 1,
        [pbr::OriginalName("POKEMON_STORE")] PokemonStore = 2,
      }

      public enum FortRenderingType {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("INTERNAL_TEST")] InternalTest = 1,
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Custom_FortLureInfoProto : pb::IMessage<Custom_FortLureInfoProto> {
        private static readonly pb::MessageParser<Custom_FortLureInfoProto> _parser = new pb::MessageParser<Custom_FortLureInfoProto>(() => new Custom_FortLureInfoProto());
        public static pb::MessageParser<Custom_FortLureInfoProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.PokemonFortProto.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Custom_FortLureInfoProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Custom_FortLureInfoProto(Custom_FortLureInfoProto other) : this() {
          fortId_ = other.fortId_;
          notSure2_ = other.notSure2_;
          activePokemon_ = other.activePokemon_;
          lureExpiryMs_ = other.lureExpiryMs_;
        }

        public Custom_FortLureInfoProto Clone() {
          return new Custom_FortLureInfoProto(this);
        }

        /// <summary>Field number for the "FortId" field.</summary>
        public const int FortIdFieldNumber = 1;
        private string fortId_ = "";
        public string FortId {
          get { return fortId_; }
          set {
            fortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "NotSure2" field.</summary>
        public const int NotSure2FieldNumber = 2;
        private double notSure2_;
        public double NotSure2 {
          get { return notSure2_; }
          set {
            notSure2_ = value;
          }
        }

        /// <summary>Field number for the "ActivePokemon" field.</summary>
        public const int ActivePokemonFieldNumber = 3;
        private global::PokemonGoApi.Proto.Custom_PokemonName activePokemon_ = 0;
        public global::PokemonGoApi.Proto.Custom_PokemonName ActivePokemon {
          get { return activePokemon_; }
          set {
            activePokemon_ = value;
          }
        }

        /// <summary>Field number for the "LureExpiryMs" field.</summary>
        public const int LureExpiryMsFieldNumber = 4;
        private long lureExpiryMs_;
        public long LureExpiryMs {
          get { return lureExpiryMs_; }
          set {
            lureExpiryMs_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Custom_FortLureInfoProto);
        }

        public bool Equals(Custom_FortLureInfoProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FortId != other.FortId) return false;
          if (NotSure2 != other.NotSure2) return false;
          if (ActivePokemon != other.ActivePokemon) return false;
          if (LureExpiryMs != other.LureExpiryMs) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (FortId.Length != 0) hash ^= FortId.GetHashCode();
          if (NotSure2 != 0D) hash ^= NotSure2.GetHashCode();
          if (ActivePokemon != 0) hash ^= ActivePokemon.GetHashCode();
          if (LureExpiryMs != 0L) hash ^= LureExpiryMs.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (FortId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FortId);
          }
          if (NotSure2 != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(NotSure2);
          }
          if (ActivePokemon != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) ActivePokemon);
          }
          if (LureExpiryMs != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(LureExpiryMs);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (FortId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FortId);
          }
          if (NotSure2 != 0D) {
            size += 1 + 8;
          }
          if (ActivePokemon != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivePokemon);
          }
          if (LureExpiryMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LureExpiryMs);
          }
          return size;
        }

        public void MergeFrom(Custom_FortLureInfoProto other) {
          if (other == null) {
            return;
          }
          if (other.FortId.Length != 0) {
            FortId = other.FortId;
          }
          if (other.NotSure2 != 0D) {
            NotSure2 = other.NotSure2;
          }
          if (other.ActivePokemon != 0) {
            ActivePokemon = other.ActivePokemon;
          }
          if (other.LureExpiryMs != 0L) {
            LureExpiryMs = other.LureExpiryMs;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                FortId = input.ReadString();
                break;
              }
              case 17: {
                NotSure2 = input.ReadDouble();
                break;
              }
              case 24: {
                activePokemon_ = (global::PokemonGoApi.Proto.Custom_PokemonName) input.ReadEnum();
                break;
              }
              case 32: {
                LureExpiryMs = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WildPokemonProto : pb::IMessage<WildPokemonProto> {
    private static readonly pb::MessageParser<WildPokemonProto> _parser = new pb::MessageParser<WildPokemonProto>(() => new WildPokemonProto());
    public static pb::MessageParser<WildPokemonProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.MapReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public WildPokemonProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public WildPokemonProto(WildPokemonProto other) : this() {
      encounterId_ = other.encounterId_;
      lastModifiedMs_ = other.lastModifiedMs_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      spawnPointId_ = other.spawnPointId_;
      Pokemon = other.pokemon_ != null ? other.Pokemon.Clone() : null;
      timeTillHiddenMs_ = other.timeTillHiddenMs_;
    }

    public WildPokemonProto Clone() {
      return new WildPokemonProto(this);
    }

    /// <summary>Field number for the "EncounterId" field.</summary>
    public const int EncounterIdFieldNumber = 1;
    private ulong encounterId_;
    public ulong EncounterId {
      get { return encounterId_; }
      set {
        encounterId_ = value;
      }
    }

    /// <summary>Field number for the "LastModifiedMs" field.</summary>
    public const int LastModifiedMsFieldNumber = 2;
    private long lastModifiedMs_;
    public long LastModifiedMs {
      get { return lastModifiedMs_; }
      set {
        lastModifiedMs_ = value;
      }
    }

    /// <summary>Field number for the "Latitude" field.</summary>
    public const int LatitudeFieldNumber = 3;
    private double latitude_;
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "Longitude" field.</summary>
    public const int LongitudeFieldNumber = 4;
    private double longitude_;
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "SpawnPointId" field.</summary>
    public const int SpawnPointIdFieldNumber = 5;
    private string spawnPointId_ = "";
    /// <summary>
    ///  S2 geographic area of the spawn point (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
    /// </summary>
    public string SpawnPointId {
      get { return spawnPointId_; }
      set {
        spawnPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Pokemon" field.</summary>
    public const int PokemonFieldNumber = 7;
    private global::PokemonGoApi.Proto.PokemonProto pokemon_;
    public global::PokemonGoApi.Proto.PokemonProto Pokemon {
      get { return pokemon_; }
      set {
        pokemon_ = value;
      }
    }

    /// <summary>Field number for the "TimeTillHiddenMs" field.</summary>
    public const int TimeTillHiddenMsFieldNumber = 11;
    private int timeTillHiddenMs_;
    /// <summary>
    ///  The amount of time before the pokemon will be gone
    /// </summary>
    public int TimeTillHiddenMs {
      get { return timeTillHiddenMs_; }
      set {
        timeTillHiddenMs_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as WildPokemonProto);
    }

    public bool Equals(WildPokemonProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncounterId != other.EncounterId) return false;
      if (LastModifiedMs != other.LastModifiedMs) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (SpawnPointId != other.SpawnPointId) return false;
      if (!object.Equals(Pokemon, other.Pokemon)) return false;
      if (TimeTillHiddenMs != other.TimeTillHiddenMs) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (EncounterId != 0UL) hash ^= EncounterId.GetHashCode();
      if (LastModifiedMs != 0L) hash ^= LastModifiedMs.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (SpawnPointId.Length != 0) hash ^= SpawnPointId.GetHashCode();
      if (pokemon_ != null) hash ^= Pokemon.GetHashCode();
      if (TimeTillHiddenMs != 0) hash ^= TimeTillHiddenMs.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EncounterId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(EncounterId);
      }
      if (LastModifiedMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastModifiedMs);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Longitude);
      }
      if (SpawnPointId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SpawnPointId);
      }
      if (pokemon_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Pokemon);
      }
      if (TimeTillHiddenMs != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TimeTillHiddenMs);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EncounterId != 0UL) {
        size += 1 + 8;
      }
      if (LastModifiedMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModifiedMs);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (SpawnPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpawnPointId);
      }
      if (pokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pokemon);
      }
      if (TimeTillHiddenMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeTillHiddenMs);
      }
      return size;
    }

    public void MergeFrom(WildPokemonProto other) {
      if (other == null) {
        return;
      }
      if (other.EncounterId != 0UL) {
        EncounterId = other.EncounterId;
      }
      if (other.LastModifiedMs != 0L) {
        LastModifiedMs = other.LastModifiedMs;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.SpawnPointId.Length != 0) {
        SpawnPointId = other.SpawnPointId;
      }
      if (other.pokemon_ != null) {
        if (pokemon_ == null) {
          pokemon_ = new global::PokemonGoApi.Proto.PokemonProto();
        }
        Pokemon.MergeFrom(other.Pokemon);
      }
      if (other.TimeTillHiddenMs != 0) {
        TimeTillHiddenMs = other.TimeTillHiddenMs;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            EncounterId = input.ReadFixed64();
            break;
          }
          case 16: {
            LastModifiedMs = input.ReadInt64();
            break;
          }
          case 25: {
            Latitude = input.ReadDouble();
            break;
          }
          case 33: {
            Longitude = input.ReadDouble();
            break;
          }
          case 42: {
            SpawnPointId = input.ReadString();
            break;
          }
          case 58: {
            if (pokemon_ == null) {
              pokemon_ = new global::PokemonGoApi.Proto.PokemonProto();
            }
            input.ReadMessage(pokemon_);
            break;
          }
          case 88: {
            TimeTillHiddenMs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClientSpawnPointProto : pb::IMessage<ClientSpawnPointProto> {
    private static readonly pb::MessageParser<ClientSpawnPointProto> _parser = new pb::MessageParser<ClientSpawnPointProto>(() => new ClientSpawnPointProto());
    public static pb::MessageParser<ClientSpawnPointProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.MapReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ClientSpawnPointProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ClientSpawnPointProto(ClientSpawnPointProto other) : this() {
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    public ClientSpawnPointProto Clone() {
      return new ClientSpawnPointProto(this);
    }

    /// <summary>Field number for the "Latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private double latitude_;
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "Longitude" field.</summary>
    public const int LongitudeFieldNumber = 3;
    private double longitude_;
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ClientSpawnPointProto);
    }

    public bool Equals(ClientSpawnPointProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Latitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Longitude);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(ClientSpawnPointProto other) {
      if (other == null) {
        return;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 17: {
            Latitude = input.ReadDouble();
            break;
          }
          case 25: {
            Longitude = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PokemonSummaryFortProto : pb::IMessage<PokemonSummaryFortProto> {
    private static readonly pb::MessageParser<PokemonSummaryFortProto> _parser = new pb::MessageParser<PokemonSummaryFortProto>(() => new PokemonSummaryFortProto());
    public static pb::MessageParser<PokemonSummaryFortProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.MapReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PokemonSummaryFortProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PokemonSummaryFortProto(PokemonSummaryFortProto other) : this() {
      fortSummaryId_ = other.fortSummaryId_;
      lastModifiedMs_ = other.lastModifiedMs_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    public PokemonSummaryFortProto Clone() {
      return new PokemonSummaryFortProto(this);
    }

    /// <summary>Field number for the "FortSummaryId" field.</summary>
    public const int FortSummaryIdFieldNumber = 1;
    private string fortSummaryId_ = "";
    public string FortSummaryId {
      get { return fortSummaryId_; }
      set {
        fortSummaryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastModifiedMs" field.</summary>
    public const int LastModifiedMsFieldNumber = 2;
    private long lastModifiedMs_;
    public long LastModifiedMs {
      get { return lastModifiedMs_; }
      set {
        lastModifiedMs_ = value;
      }
    }

    /// <summary>Field number for the "Latitude" field.</summary>
    public const int LatitudeFieldNumber = 3;
    private double latitude_;
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "Longitude" field.</summary>
    public const int LongitudeFieldNumber = 4;
    private double longitude_;
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PokemonSummaryFortProto);
    }

    public bool Equals(PokemonSummaryFortProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FortSummaryId != other.FortSummaryId) return false;
      if (LastModifiedMs != other.LastModifiedMs) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FortSummaryId.Length != 0) hash ^= FortSummaryId.GetHashCode();
      if (LastModifiedMs != 0L) hash ^= LastModifiedMs.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FortSummaryId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FortSummaryId);
      }
      if (LastModifiedMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastModifiedMs);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Longitude);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FortSummaryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FortSummaryId);
      }
      if (LastModifiedMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModifiedMs);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(PokemonSummaryFortProto other) {
      if (other == null) {
        return;
      }
      if (other.FortSummaryId.Length != 0) {
        FortSummaryId = other.FortSummaryId;
      }
      if (other.LastModifiedMs != 0L) {
        LastModifiedMs = other.LastModifiedMs;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FortSummaryId = input.ReadString();
            break;
          }
          case 16: {
            LastModifiedMs = input.ReadInt64();
            break;
          }
          case 25: {
            Latitude = input.ReadDouble();
            break;
          }
          case 33: {
            Longitude = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NearbyPokemonProto : pb::IMessage<NearbyPokemonProto> {
    private static readonly pb::MessageParser<NearbyPokemonProto> _parser = new pb::MessageParser<NearbyPokemonProto>(() => new NearbyPokemonProto());
    public static pb::MessageParser<NearbyPokemonProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.MapReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NearbyPokemonProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NearbyPokemonProto(NearbyPokemonProto other) : this() {
      pokedexNumber_ = other.pokedexNumber_;
      distanceMeters_ = other.distanceMeters_;
      encounterId_ = other.encounterId_;
    }

    public NearbyPokemonProto Clone() {
      return new NearbyPokemonProto(this);
    }

    /// <summary>Field number for the "PokedexNumber" field.</summary>
    public const int PokedexNumberFieldNumber = 1;
    private global::PokemonGoApi.Proto.Custom_PokemonName pokedexNumber_ = 0;
    public global::PokemonGoApi.Proto.Custom_PokemonName PokedexNumber {
      get { return pokedexNumber_; }
      set {
        pokedexNumber_ = value;
      }
    }

    /// <summary>Field number for the "DistanceMeters" field.</summary>
    public const int DistanceMetersFieldNumber = 2;
    private float distanceMeters_;
    public float DistanceMeters {
      get { return distanceMeters_; }
      set {
        distanceMeters_ = value;
      }
    }

    /// <summary>Field number for the "EncounterId" field.</summary>
    public const int EncounterIdFieldNumber = 3;
    private ulong encounterId_;
    public ulong EncounterId {
      get { return encounterId_; }
      set {
        encounterId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NearbyPokemonProto);
    }

    public bool Equals(NearbyPokemonProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PokedexNumber != other.PokedexNumber) return false;
      if (DistanceMeters != other.DistanceMeters) return false;
      if (EncounterId != other.EncounterId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PokedexNumber != 0) hash ^= PokedexNumber.GetHashCode();
      if (DistanceMeters != 0F) hash ^= DistanceMeters.GetHashCode();
      if (EncounterId != 0UL) hash ^= EncounterId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PokedexNumber != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PokedexNumber);
      }
      if (DistanceMeters != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DistanceMeters);
      }
      if (EncounterId != 0UL) {
        output.WriteRawTag(25);
        output.WriteFixed64(EncounterId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PokedexNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokedexNumber);
      }
      if (DistanceMeters != 0F) {
        size += 1 + 4;
      }
      if (EncounterId != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(NearbyPokemonProto other) {
      if (other == null) {
        return;
      }
      if (other.PokedexNumber != 0) {
        PokedexNumber = other.PokedexNumber;
      }
      if (other.DistanceMeters != 0F) {
        DistanceMeters = other.DistanceMeters;
      }
      if (other.EncounterId != 0UL) {
        EncounterId = other.EncounterId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pokedexNumber_ = (global::PokemonGoApi.Proto.Custom_PokemonName) input.ReadEnum();
            break;
          }
          case 21: {
            DistanceMeters = input.ReadFloat();
            break;
          }
          case 25: {
            EncounterId = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
