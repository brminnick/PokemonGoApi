// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PokemonGoApi.Proto {

  /// <summary>Holder for reflection information generated from inventory.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class InventoryReflection {

    #region Descriptor
    /// <summary>File descriptor for inventory.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InventoryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9pbnZlbnRvcnkucHJvdG8SElBva2Vtb25Hb0FwaS5Qcm90byIqChVJbnZl",
            "bnRvcnlSZXF1ZXN0UHJvdG8SEQoJdGltZXN0YW1wGAEgASgDIoAFCgxQb2tl",
            "bW9uUHJvdG8SDQoFZW50SWQYASABKAYSEQoJUG9rZW1vbklkGAIgASgFEgoK",
            "AkNwGAMgASgFEg8KB1N0YW1pbmEYBCABKAUSEgoKTWF4U3RhbWluYRgFIAEo",
            "BRINCgVNb3ZlMRgGIAEoBRINCgVNb3ZlMhgHIAEoBRIWCg5EZXBsb3llZEZv",
            "cnRJZBgIIAEoBRIRCglPd25lck5hbWUYCSABKAkSDQoFSXNFZ2cYCiABKAgS",
            "GQoRRWdnS21XYWxrZWRUYXJnZXQYCyABKAESGAoQRWdnS21XYWxrZWRTdGFy",
            "dBgMIAEoARIOCgZPcmlnaW4YDiABKAUSDwoHSGVpZ2h0TRgPIAEoAhIQCghX",
            "ZWlnaHRLZxgQIAEoAhIYChBJbmRpdmlkdWFsQXR0YWNrGBEgASgFEhkKEUlu",
            "ZGl2aWR1YWxEZWZlbnNlGBIgASgFEhkKEUluZGl2aWR1YWxTdGFtaW5hGBMg",
            "ASgFEhQKDENwTXVsdGlwbGllchgUIAEoAhIQCghQb2tlYmFsbBgVIAEoBRIY",
            "ChBDYXB0dXJlZFMyQ2VsbElkGBYgASgEEhcKD0JhdHRsZXNBdHRhY2tlZBgX",
            "IAEoBRIXCg9CYXR0bGVzRGVmZW5kZWQYGCABKAUSFgoORWdnSW5jdWJhdG9y",
            "SWQYGSABKAUSFgoOQ3JlYXRpb25UaW1lTXMYGiABKAMSEwoLTnVtVXBncmFk",
            "ZXMYGyABKAUSHgoWQWRkaXRpb25hbENwTXVsdGlwbGllchgcIAEoAhIQCghG",
            "YXZvcml0ZRgdIAEoCBIQCghOaWNrbmFtZRgeIAEoCRIQCghGcm9tRm9ydBgf",
            "IAEoCCLoAQoWSW52ZW50b3J5UmVzcG9uc2VQcm90bxIRCgl0aW1lc3RhbXAY",
            "AiABKAMSVAoFaXRlbXMYAyADKAsyRS5Qb2tlbW9uR29BcGkuUHJvdG8uSW52",
            "ZW50b3J5UmVzcG9uc2VQcm90by5JbnZlbnRvcnlJdGVtUmVzcG9uc2VQcm90",
            "bxplChpJbnZlbnRvcnlJdGVtUmVzcG9uc2VQcm90bxIRCgl0aW1lc3RhbXAY",
            "ASABKAMSNAoEaXRlbRgDIAEoCzImLlBva2Vtb25Hb0FwaS5Qcm90by5JbnZl",
            "bnRvcnlJdGVtUHJvdG8itBAKEkludmVudG9yeUl0ZW1Qcm90bxIxCgdQb2tl",
            "bW9uGAEgASgLMiAuUG9rZW1vbkdvQXBpLlByb3RvLlBva2Vtb25Qcm90bxI+",
            "CgRJdGVtGAIgASgLMjAuUG9rZW1vbkdvQXBpLlByb3RvLkludmVudG9yeUl0",
            "ZW1Qcm90by5JdGVtUHJvdG8STgoMUG9rZWRleEVudHJ5GAMgASgLMjguUG9r",
            "ZW1vbkdvQXBpLlByb3RvLkludmVudG9yeUl0ZW1Qcm90by5Qb2tlZGV4RW50",
            "cnlQcm90bxJMCgtQbGF5ZXJTdGF0cxgEIAEoCzI3LlBva2Vtb25Hb0FwaS5Q",
            "cm90by5JbnZlbnRvcnlJdGVtUHJvdG8uUGxheWVyU3RhdHNQcm90bxJSCg5Q",
            "bGF5ZXJDdXJyZW5jeRgFIAEoCzI6LlBva2Vtb25Hb0FwaS5Qcm90by5JbnZl",
            "bnRvcnlJdGVtUHJvdG8uUGxheWVyQ3VycmVuY3lQcm90bxJOCgxQbGF5ZXJD",
            "YW1lcmEYBiABKAsyOC5Qb2tlbW9uR29BcGkuUHJvdG8uSW52ZW50b3J5SXRl",
            "bVByb3RvLlBsYXllckNhbWVyYVByb3RvElgKEUludmVudG9yeVVwZ3JhZGVz",
            "GAcgASgLMj0uUG9rZW1vbkdvQXBpLlByb3RvLkludmVudG9yeUl0ZW1Qcm90",
            "by5JbnZlbnRvcnlVcGdyYWRlc1Byb3RvEkwKC0FwcGxpZWRJdGVtGAggASgL",
            "MjcuUG9rZW1vbkdvQXBpLlByb3RvLkludmVudG9yeUl0ZW1Qcm90by5BcHBs",
            "aWVkSXRlbVByb3RvEk8KDUVnZ0luY3ViYXRvcnMYCSABKAsyOC5Qb2tlbW9u",
            "R29BcGkuUHJvdG8uSW52ZW50b3J5SXRlbVByb3RvLkVnZ0luY3ViYXRvclBy",
            "b3RvElAKDVBva2Vtb25GYW1pbHkYCiABKAsyOS5Qb2tlbW9uR29BcGkuUHJv",
            "dG8uSW52ZW50b3J5SXRlbVByb3RvLlBva2Vtb25GYW1pbHlQcm90bxo4CglJ",
            "dGVtUHJvdG8SDAoESXRlbRgBIAEoBRINCgVDb3VudBgCIAEoBRIOCgZVbnNl",
            "ZW4YAyABKAgalwEKEVBva2VkZXhFbnRyeVByb3RvEhoKElBva2VkZXhFbnRy",
            "eU51bWJlchgBIAEoBRIYChBUaW1lc0VuY291bnRlcmVkGAIgASgFEhUKDVRp",
            "bWVzQ2FwdHVyZWQYAyABKAUSHAoURXZvbHV0aW9uU3RvbmVQaWVjZXMYBCAB",
            "KAUSFwoPRXZvbHV0aW9uU3RvbmVzGAUgASgFGtoEChBQbGF5ZXJTdGF0c1By",
            "b3RvEg0KBUxldmVsGAEgASgFEhIKCkV4cGVyaWVuY2UYAiABKAMSFAoMUHJl",
            "dkxldmVsRXhwGAMgASgDEhQKDE5leHRMZXZlbEV4cBgEIAEoAxIQCghLbVdh",
            "bGtlZBgFIAEoAhIdChVOdW1Qb2tlbW9uRW5jb3VudGVyZWQYBiABKAUSHwoX",
            "TnVtVW5pcXVlUG9rZWRleEVudHJpZXMYByABKAUSGgoSTnVtUG9rZW1vbkNh",
            "cHR1cmVkGAggASgFEhUKDU51bUV2b2x1dGlvbnMYCSABKAUSFgoOUG9rZVN0",
            "b3BWaXNpdHMYCiABKAUSHgoWTnVtYmVyT2ZQb2tlYmFsbFRocm93bhgLIAEo",
            "BRIWCg5OdW1FZ2dzSGF0Y2hlZBgMIAEoBRIZChFCaWdNYWdpa2FycENhdWdo",
            "dBgNIAEoBRIaChJOdW1CYXR0bGVBdHRhY2tXb24YDiABKAUSHAoUTnVtQmF0",
            "dGxlQXR0YWNrVG90YWwYDyABKAUSHAoUTnVtQmF0dGxlRGVmZW5kZWRXb24Y",
            "ECABKAUSHAoUTnVtQmF0dGxlVHJhaW5pbmdXb24YESABKAUSHgoWTnVtQmF0",
            "dGxlVHJhaW5pbmdUb3RhbBgSIAEoBRIbChNQcmVzdGlnZVJhaXNlZFRvdGFs",
            "GBMgASgFEhwKFFByZXN0aWdlRHJvcHBlZFRvdGFsGBQgASgFEhoKEk51bVBv",
            "a2Vtb25EZXBsb3llZBgVIAEoBRIaChJTbWFsbFJhdHRhdGFDYXVnaHQYFyAB",
            "KAUaWwoQQXBwbGllZEl0ZW1Qcm90bxIMCgRJdGVtGAEgASgFEhAKCEl0ZW1U",
            "eXBlGAIgASgFEhQKDEV4cGlyYXRpb25NcxgDIAEoAxIRCglBcHBsaWVkTXMY",
            "BCABKAMaKgoRUGxheWVyQ2FtZXJhUHJvdG8SFQoNRGVmYXVsdENhbWVyYRgB",
            "IAEoCBojChNQbGF5ZXJDdXJyZW5jeVByb3RvEgwKBEdlbXMYASABKAUaMgoW",
            "SW52ZW50b3J5VXBncmFkZXNQcm90bxIYChBJbnZlbnRvcnlVcGdyYWRlGAEg",
            "ASgFGtMBChFFZ2dJbmN1YmF0b3JQcm90bxIOCgZJdGVtSWQYASABKAkSPgoE",
            "SXRlbRgCIAEoCzIwLlBva2Vtb25Hb0FwaS5Qcm90by5JbnZlbnRvcnlJdGVt",
            "UHJvdG8uSXRlbVByb3RvEhUKDUluY3ViYXRvclR5cGUYAyABKAUSFQoNVXNl",
            "c1JlbWFpbmluZxgEIAEoBRIRCglQb2tlbW9uSWQYBSABKAMSFQoNU3RhcnRL",
            "bVdhbGtlZBgGIAEoARIWCg5UYXJnZXRLbVdhbGtlZBgHIAEoARo1ChJQb2tl",
            "bW9uRmFtaWx5UHJvdG8SEAoIRmFtaWx5SWQYASABKAUSDQoFQ2FuZHkYAiAB",
            "KAUiKQoUVHJhbnNmZXJQb2tlbW9uUHJvdG8SEQoJUG9rZW1vbklkGAEgASgG",
            "Ij8KF1RyYW5zZmVyUG9rZW1vbk91dFByb3RvEg4KBlN0YXR1cxgBIAEoBRIU",
            "CgxDYW5keUF3YXJkZWQYAiABKAUiJwoSRXZvbHZlUG9rZW1vblByb3RvEhEK",
            "CVBva2Vtb25JZBgBIAEoBiKLAQoVRXZvbHZlUG9rZW1vbk91dFByb3RvEg4K",
            "BlJlc3VsdBgBIAEoBRI4Cg5Fdm9sdmVkUG9rZW1vbhgCIAEoCzIgLlBva2Vt",
            "b25Hb0FwaS5Qcm90by5Qb2tlbW9uUHJvdG8SEgoKRXhwQXdhcmRlZBgDIAEo",
            "BRIUCgxDYW5keUF3YXJkZWQYBCABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryRequestProto), global::PokemonGoApi.Proto.InventoryRequestProto.Parser, new[]{ "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.PokemonProto), global::PokemonGoApi.Proto.PokemonProto.Parser, new[]{ "EntId", "PokemonId", "Cp", "Stamina", "MaxStamina", "Move1", "Move2", "DeployedFortId", "OwnerName", "IsEgg", "EggKmWalkedTarget", "EggKmWalkedStart", "Origin", "HeightM", "WeightKg", "IndividualAttack", "IndividualDefense", "IndividualStamina", "CpMultiplier", "Pokeball", "CapturedS2CellId", "BattlesAttacked", "BattlesDefended", "EggIncubatorId", "CreationTimeMs", "NumUpgrades", "AdditionalCpMultiplier", "Favorite", "Nickname", "FromFort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryResponseProto), global::PokemonGoApi.Proto.InventoryResponseProto.Parser, new[]{ "Timestamp", "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryResponseProto.Types.InventoryItemResponseProto), global::PokemonGoApi.Proto.InventoryResponseProto.Types.InventoryItemResponseProto.Parser, new[]{ "Timestamp", "Item" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryItemProto), global::PokemonGoApi.Proto.InventoryItemProto.Parser, new[]{ "Pokemon", "Item", "PokedexEntry", "PlayerStats", "PlayerCurrency", "PlayerCamera", "InventoryUpgrades", "AppliedItem", "EggIncubators", "PokemonFamily" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryItemProto.Types.ItemProto), global::PokemonGoApi.Proto.InventoryItemProto.Types.ItemProto.Parser, new[]{ "Item", "Count", "Unseen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryItemProto.Types.PokedexEntryProto), global::PokemonGoApi.Proto.InventoryItemProto.Types.PokedexEntryProto.Parser, new[]{ "PokedexEntryNumber", "TimesEncountered", "TimesCaptured", "EvolutionStonePieces", "EvolutionStones" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerStatsProto), global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerStatsProto.Parser, new[]{ "Level", "Experience", "PrevLevelExp", "NextLevelExp", "KmWalked", "NumPokemonEncountered", "NumUniquePokedexEntries", "NumPokemonCaptured", "NumEvolutions", "PokeStopVisits", "NumberOfPokeballThrown", "NumEggsHatched", "BigMagikarpCaught", "NumBattleAttackWon", "NumBattleAttackTotal", "NumBattleDefendedWon", "NumBattleTrainingWon", "NumBattleTrainingTotal", "PrestigeRaisedTotal", "PrestigeDroppedTotal", "NumPokemonDeployed", "SmallRattataCaught" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryItemProto.Types.AppliedItemProto), global::PokemonGoApi.Proto.InventoryItemProto.Types.AppliedItemProto.Parser, new[]{ "Item", "ItemType", "ExpirationMs", "AppliedMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCameraProto), global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCameraProto.Parser, new[]{ "DefaultCamera" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCurrencyProto), global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCurrencyProto.Parser, new[]{ "Gems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryItemProto.Types.InventoryUpgradesProto), global::PokemonGoApi.Proto.InventoryItemProto.Types.InventoryUpgradesProto.Parser, new[]{ "InventoryUpgrade" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryItemProto.Types.EggIncubatorProto), global::PokemonGoApi.Proto.InventoryItemProto.Types.EggIncubatorProto.Parser, new[]{ "ItemId", "Item", "IncubatorType", "UsesRemaining", "PokemonId", "StartKmWalked", "TargetKmWalked" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.InventoryItemProto.Types.PokemonFamilyProto), global::PokemonGoApi.Proto.InventoryItemProto.Types.PokemonFamilyProto.Parser, new[]{ "FamilyId", "Candy" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.TransferPokemonProto), global::PokemonGoApi.Proto.TransferPokemonProto.Parser, new[]{ "PokemonId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.TransferPokemonOutProto), global::PokemonGoApi.Proto.TransferPokemonOutProto.Parser, new[]{ "Status", "CandyAwarded" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.EvolvePokemonProto), global::PokemonGoApi.Proto.EvolvePokemonProto.Parser, new[]{ "PokemonId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoApi.Proto.EvolvePokemonOutProto), global::PokemonGoApi.Proto.EvolvePokemonOutProto.Parser, new[]{ "Result", "EvolvedPokemon", "ExpAwarded", "CandyAwarded" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class InventoryRequestProto : pb::IMessage<InventoryRequestProto> {
    private static readonly pb::MessageParser<InventoryRequestProto> _parser = new pb::MessageParser<InventoryRequestProto>(() => new InventoryRequestProto());
    public static pb::MessageParser<InventoryRequestProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.InventoryReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public InventoryRequestProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public InventoryRequestProto(InventoryRequestProto other) : this() {
      timestamp_ = other.timestamp_;
    }

    public InventoryRequestProto Clone() {
      return new InventoryRequestProto(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as InventoryRequestProto);
    }

    public bool Equals(InventoryRequestProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    public void MergeFrom(InventoryRequestProto other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PokemonProto : pb::IMessage<PokemonProto> {
    private static readonly pb::MessageParser<PokemonProto> _parser = new pb::MessageParser<PokemonProto>(() => new PokemonProto());
    public static pb::MessageParser<PokemonProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.InventoryReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PokemonProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PokemonProto(PokemonProto other) : this() {
      entId_ = other.entId_;
      pokemonId_ = other.pokemonId_;
      cp_ = other.cp_;
      stamina_ = other.stamina_;
      maxStamina_ = other.maxStamina_;
      move1_ = other.move1_;
      move2_ = other.move2_;
      deployedFortId_ = other.deployedFortId_;
      ownerName_ = other.ownerName_;
      isEgg_ = other.isEgg_;
      eggKmWalkedTarget_ = other.eggKmWalkedTarget_;
      eggKmWalkedStart_ = other.eggKmWalkedStart_;
      origin_ = other.origin_;
      heightM_ = other.heightM_;
      weightKg_ = other.weightKg_;
      individualAttack_ = other.individualAttack_;
      individualDefense_ = other.individualDefense_;
      individualStamina_ = other.individualStamina_;
      cpMultiplier_ = other.cpMultiplier_;
      pokeball_ = other.pokeball_;
      capturedS2CellId_ = other.capturedS2CellId_;
      battlesAttacked_ = other.battlesAttacked_;
      battlesDefended_ = other.battlesDefended_;
      eggIncubatorId_ = other.eggIncubatorId_;
      creationTimeMs_ = other.creationTimeMs_;
      numUpgrades_ = other.numUpgrades_;
      additionalCpMultiplier_ = other.additionalCpMultiplier_;
      favorite_ = other.favorite_;
      nickname_ = other.nickname_;
      fromFort_ = other.fromFort_;
    }

    public PokemonProto Clone() {
      return new PokemonProto(this);
    }

    /// <summary>Field number for the "entId" field.</summary>
    public const int EntIdFieldNumber = 1;
    private ulong entId_;
    public ulong EntId {
      get { return entId_; }
      set {
        entId_ = value;
      }
    }

    /// <summary>Field number for the "PokemonId" field.</summary>
    public const int PokemonIdFieldNumber = 2;
    private int pokemonId_;
    public int PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    /// <summary>Field number for the "Cp" field.</summary>
    public const int CpFieldNumber = 3;
    private int cp_;
    public int Cp {
      get { return cp_; }
      set {
        cp_ = value;
      }
    }

    /// <summary>Field number for the "Stamina" field.</summary>
    public const int StaminaFieldNumber = 4;
    private int stamina_;
    public int Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "MaxStamina" field.</summary>
    public const int MaxStaminaFieldNumber = 5;
    private int maxStamina_;
    public int MaxStamina {
      get { return maxStamina_; }
      set {
        maxStamina_ = value;
      }
    }

    /// <summary>Field number for the "Move1" field.</summary>
    public const int Move1FieldNumber = 6;
    private int move1_;
    public int Move1 {
      get { return move1_; }
      set {
        move1_ = value;
      }
    }

    /// <summary>Field number for the "Move2" field.</summary>
    public const int Move2FieldNumber = 7;
    private int move2_;
    public int Move2 {
      get { return move2_; }
      set {
        move2_ = value;
      }
    }

    /// <summary>Field number for the "DeployedFortId" field.</summary>
    public const int DeployedFortIdFieldNumber = 8;
    private int deployedFortId_;
    public int DeployedFortId {
      get { return deployedFortId_; }
      set {
        deployedFortId_ = value;
      }
    }

    /// <summary>Field number for the "OwnerName" field.</summary>
    public const int OwnerNameFieldNumber = 9;
    private string ownerName_ = "";
    public string OwnerName {
      get { return ownerName_; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsEgg" field.</summary>
    public const int IsEggFieldNumber = 10;
    private bool isEgg_;
    public bool IsEgg {
      get { return isEgg_; }
      set {
        isEgg_ = value;
      }
    }

    /// <summary>Field number for the "EggKmWalkedTarget" field.</summary>
    public const int EggKmWalkedTargetFieldNumber = 11;
    private double eggKmWalkedTarget_;
    public double EggKmWalkedTarget {
      get { return eggKmWalkedTarget_; }
      set {
        eggKmWalkedTarget_ = value;
      }
    }

    /// <summary>Field number for the "EggKmWalkedStart" field.</summary>
    public const int EggKmWalkedStartFieldNumber = 12;
    private double eggKmWalkedStart_;
    public double EggKmWalkedStart {
      get { return eggKmWalkedStart_; }
      set {
        eggKmWalkedStart_ = value;
      }
    }

    /// <summary>Field number for the "Origin" field.</summary>
    public const int OriginFieldNumber = 14;
    private int origin_;
    public int Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "HeightM" field.</summary>
    public const int HeightMFieldNumber = 15;
    private float heightM_;
    public float HeightM {
      get { return heightM_; }
      set {
        heightM_ = value;
      }
    }

    /// <summary>Field number for the "WeightKg" field.</summary>
    public const int WeightKgFieldNumber = 16;
    private float weightKg_;
    public float WeightKg {
      get { return weightKg_; }
      set {
        weightKg_ = value;
      }
    }

    /// <summary>Field number for the "IndividualAttack" field.</summary>
    public const int IndividualAttackFieldNumber = 17;
    private int individualAttack_;
    public int IndividualAttack {
      get { return individualAttack_; }
      set {
        individualAttack_ = value;
      }
    }

    /// <summary>Field number for the "IndividualDefense" field.</summary>
    public const int IndividualDefenseFieldNumber = 18;
    private int individualDefense_;
    public int IndividualDefense {
      get { return individualDefense_; }
      set {
        individualDefense_ = value;
      }
    }

    /// <summary>Field number for the "IndividualStamina" field.</summary>
    public const int IndividualStaminaFieldNumber = 19;
    private int individualStamina_;
    public int IndividualStamina {
      get { return individualStamina_; }
      set {
        individualStamina_ = value;
      }
    }

    /// <summary>Field number for the "CpMultiplier" field.</summary>
    public const int CpMultiplierFieldNumber = 20;
    private float cpMultiplier_;
    public float CpMultiplier {
      get { return cpMultiplier_; }
      set {
        cpMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "Pokeball" field.</summary>
    public const int PokeballFieldNumber = 21;
    private int pokeball_;
    public int Pokeball {
      get { return pokeball_; }
      set {
        pokeball_ = value;
      }
    }

    /// <summary>Field number for the "CapturedS2CellId" field.</summary>
    public const int CapturedS2CellIdFieldNumber = 22;
    private ulong capturedS2CellId_;
    public ulong CapturedS2CellId {
      get { return capturedS2CellId_; }
      set {
        capturedS2CellId_ = value;
      }
    }

    /// <summary>Field number for the "BattlesAttacked" field.</summary>
    public const int BattlesAttackedFieldNumber = 23;
    private int battlesAttacked_;
    public int BattlesAttacked {
      get { return battlesAttacked_; }
      set {
        battlesAttacked_ = value;
      }
    }

    /// <summary>Field number for the "BattlesDefended" field.</summary>
    public const int BattlesDefendedFieldNumber = 24;
    private int battlesDefended_;
    public int BattlesDefended {
      get { return battlesDefended_; }
      set {
        battlesDefended_ = value;
      }
    }

    /// <summary>Field number for the "EggIncubatorId" field.</summary>
    public const int EggIncubatorIdFieldNumber = 25;
    private int eggIncubatorId_;
    public int EggIncubatorId {
      get { return eggIncubatorId_; }
      set {
        eggIncubatorId_ = value;
      }
    }

    /// <summary>Field number for the "CreationTimeMs" field.</summary>
    public const int CreationTimeMsFieldNumber = 26;
    private long creationTimeMs_;
    public long CreationTimeMs {
      get { return creationTimeMs_; }
      set {
        creationTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "NumUpgrades" field.</summary>
    public const int NumUpgradesFieldNumber = 27;
    private int numUpgrades_;
    public int NumUpgrades {
      get { return numUpgrades_; }
      set {
        numUpgrades_ = value;
      }
    }

    /// <summary>Field number for the "AdditionalCpMultiplier" field.</summary>
    public const int AdditionalCpMultiplierFieldNumber = 28;
    private float additionalCpMultiplier_;
    public float AdditionalCpMultiplier {
      get { return additionalCpMultiplier_; }
      set {
        additionalCpMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "Favorite" field.</summary>
    public const int FavoriteFieldNumber = 29;
    private bool favorite_;
    public bool Favorite {
      get { return favorite_; }
      set {
        favorite_ = value;
      }
    }

    /// <summary>Field number for the "Nickname" field.</summary>
    public const int NicknameFieldNumber = 30;
    private string nickname_ = "";
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FromFort" field.</summary>
    public const int FromFortFieldNumber = 31;
    private bool fromFort_;
    public bool FromFort {
      get { return fromFort_; }
      set {
        fromFort_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PokemonProto);
    }

    public bool Equals(PokemonProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntId != other.EntId) return false;
      if (PokemonId != other.PokemonId) return false;
      if (Cp != other.Cp) return false;
      if (Stamina != other.Stamina) return false;
      if (MaxStamina != other.MaxStamina) return false;
      if (Move1 != other.Move1) return false;
      if (Move2 != other.Move2) return false;
      if (DeployedFortId != other.DeployedFortId) return false;
      if (OwnerName != other.OwnerName) return false;
      if (IsEgg != other.IsEgg) return false;
      if (EggKmWalkedTarget != other.EggKmWalkedTarget) return false;
      if (EggKmWalkedStart != other.EggKmWalkedStart) return false;
      if (Origin != other.Origin) return false;
      if (HeightM != other.HeightM) return false;
      if (WeightKg != other.WeightKg) return false;
      if (IndividualAttack != other.IndividualAttack) return false;
      if (IndividualDefense != other.IndividualDefense) return false;
      if (IndividualStamina != other.IndividualStamina) return false;
      if (CpMultiplier != other.CpMultiplier) return false;
      if (Pokeball != other.Pokeball) return false;
      if (CapturedS2CellId != other.CapturedS2CellId) return false;
      if (BattlesAttacked != other.BattlesAttacked) return false;
      if (BattlesDefended != other.BattlesDefended) return false;
      if (EggIncubatorId != other.EggIncubatorId) return false;
      if (CreationTimeMs != other.CreationTimeMs) return false;
      if (NumUpgrades != other.NumUpgrades) return false;
      if (AdditionalCpMultiplier != other.AdditionalCpMultiplier) return false;
      if (Favorite != other.Favorite) return false;
      if (Nickname != other.Nickname) return false;
      if (FromFort != other.FromFort) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (EntId != 0UL) hash ^= EntId.GetHashCode();
      if (PokemonId != 0) hash ^= PokemonId.GetHashCode();
      if (Cp != 0) hash ^= Cp.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      if (MaxStamina != 0) hash ^= MaxStamina.GetHashCode();
      if (Move1 != 0) hash ^= Move1.GetHashCode();
      if (Move2 != 0) hash ^= Move2.GetHashCode();
      if (DeployedFortId != 0) hash ^= DeployedFortId.GetHashCode();
      if (OwnerName.Length != 0) hash ^= OwnerName.GetHashCode();
      if (IsEgg != false) hash ^= IsEgg.GetHashCode();
      if (EggKmWalkedTarget != 0D) hash ^= EggKmWalkedTarget.GetHashCode();
      if (EggKmWalkedStart != 0D) hash ^= EggKmWalkedStart.GetHashCode();
      if (Origin != 0) hash ^= Origin.GetHashCode();
      if (HeightM != 0F) hash ^= HeightM.GetHashCode();
      if (WeightKg != 0F) hash ^= WeightKg.GetHashCode();
      if (IndividualAttack != 0) hash ^= IndividualAttack.GetHashCode();
      if (IndividualDefense != 0) hash ^= IndividualDefense.GetHashCode();
      if (IndividualStamina != 0) hash ^= IndividualStamina.GetHashCode();
      if (CpMultiplier != 0F) hash ^= CpMultiplier.GetHashCode();
      if (Pokeball != 0) hash ^= Pokeball.GetHashCode();
      if (CapturedS2CellId != 0UL) hash ^= CapturedS2CellId.GetHashCode();
      if (BattlesAttacked != 0) hash ^= BattlesAttacked.GetHashCode();
      if (BattlesDefended != 0) hash ^= BattlesDefended.GetHashCode();
      if (EggIncubatorId != 0) hash ^= EggIncubatorId.GetHashCode();
      if (CreationTimeMs != 0L) hash ^= CreationTimeMs.GetHashCode();
      if (NumUpgrades != 0) hash ^= NumUpgrades.GetHashCode();
      if (AdditionalCpMultiplier != 0F) hash ^= AdditionalCpMultiplier.GetHashCode();
      if (Favorite != false) hash ^= Favorite.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (FromFort != false) hash ^= FromFort.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EntId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(EntId);
      }
      if (PokemonId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PokemonId);
      }
      if (Cp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cp);
      }
      if (Stamina != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stamina);
      }
      if (MaxStamina != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxStamina);
      }
      if (Move1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Move1);
      }
      if (Move2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Move2);
      }
      if (DeployedFortId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DeployedFortId);
      }
      if (OwnerName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(OwnerName);
      }
      if (IsEgg != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsEgg);
      }
      if (EggKmWalkedTarget != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(EggKmWalkedTarget);
      }
      if (EggKmWalkedStart != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(EggKmWalkedStart);
      }
      if (Origin != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Origin);
      }
      if (HeightM != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(HeightM);
      }
      if (WeightKg != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(WeightKg);
      }
      if (IndividualAttack != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(IndividualAttack);
      }
      if (IndividualDefense != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(IndividualDefense);
      }
      if (IndividualStamina != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(IndividualStamina);
      }
      if (CpMultiplier != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CpMultiplier);
      }
      if (Pokeball != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Pokeball);
      }
      if (CapturedS2CellId != 0UL) {
        output.WriteRawTag(176, 1);
        output.WriteUInt64(CapturedS2CellId);
      }
      if (BattlesAttacked != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(BattlesAttacked);
      }
      if (BattlesDefended != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(BattlesDefended);
      }
      if (EggIncubatorId != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(EggIncubatorId);
      }
      if (CreationTimeMs != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(CreationTimeMs);
      }
      if (NumUpgrades != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(NumUpgrades);
      }
      if (AdditionalCpMultiplier != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(AdditionalCpMultiplier);
      }
      if (Favorite != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(Favorite);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Nickname);
      }
      if (FromFort != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(FromFort);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EntId != 0UL) {
        size += 1 + 8;
      }
      if (PokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokemonId);
      }
      if (Cp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cp);
      }
      if (Stamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stamina);
      }
      if (MaxStamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxStamina);
      }
      if (Move1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move1);
      }
      if (Move2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move2);
      }
      if (DeployedFortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeployedFortId);
      }
      if (OwnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
      }
      if (IsEgg != false) {
        size += 1 + 1;
      }
      if (EggKmWalkedTarget != 0D) {
        size += 1 + 8;
      }
      if (EggKmWalkedStart != 0D) {
        size += 1 + 8;
      }
      if (Origin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Origin);
      }
      if (HeightM != 0F) {
        size += 1 + 4;
      }
      if (WeightKg != 0F) {
        size += 2 + 4;
      }
      if (IndividualAttack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualAttack);
      }
      if (IndividualDefense != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualDefense);
      }
      if (IndividualStamina != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualStamina);
      }
      if (CpMultiplier != 0F) {
        size += 2 + 4;
      }
      if (Pokeball != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Pokeball);
      }
      if (CapturedS2CellId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CapturedS2CellId);
      }
      if (BattlesAttacked != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattlesAttacked);
      }
      if (BattlesDefended != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattlesDefended);
      }
      if (EggIncubatorId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EggIncubatorId);
      }
      if (CreationTimeMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CreationTimeMs);
      }
      if (NumUpgrades != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumUpgrades);
      }
      if (AdditionalCpMultiplier != 0F) {
        size += 2 + 4;
      }
      if (Favorite != false) {
        size += 2 + 1;
      }
      if (Nickname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (FromFort != false) {
        size += 2 + 1;
      }
      return size;
    }

    public void MergeFrom(PokemonProto other) {
      if (other == null) {
        return;
      }
      if (other.EntId != 0UL) {
        EntId = other.EntId;
      }
      if (other.PokemonId != 0) {
        PokemonId = other.PokemonId;
      }
      if (other.Cp != 0) {
        Cp = other.Cp;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      if (other.MaxStamina != 0) {
        MaxStamina = other.MaxStamina;
      }
      if (other.Move1 != 0) {
        Move1 = other.Move1;
      }
      if (other.Move2 != 0) {
        Move2 = other.Move2;
      }
      if (other.DeployedFortId != 0) {
        DeployedFortId = other.DeployedFortId;
      }
      if (other.OwnerName.Length != 0) {
        OwnerName = other.OwnerName;
      }
      if (other.IsEgg != false) {
        IsEgg = other.IsEgg;
      }
      if (other.EggKmWalkedTarget != 0D) {
        EggKmWalkedTarget = other.EggKmWalkedTarget;
      }
      if (other.EggKmWalkedStart != 0D) {
        EggKmWalkedStart = other.EggKmWalkedStart;
      }
      if (other.Origin != 0) {
        Origin = other.Origin;
      }
      if (other.HeightM != 0F) {
        HeightM = other.HeightM;
      }
      if (other.WeightKg != 0F) {
        WeightKg = other.WeightKg;
      }
      if (other.IndividualAttack != 0) {
        IndividualAttack = other.IndividualAttack;
      }
      if (other.IndividualDefense != 0) {
        IndividualDefense = other.IndividualDefense;
      }
      if (other.IndividualStamina != 0) {
        IndividualStamina = other.IndividualStamina;
      }
      if (other.CpMultiplier != 0F) {
        CpMultiplier = other.CpMultiplier;
      }
      if (other.Pokeball != 0) {
        Pokeball = other.Pokeball;
      }
      if (other.CapturedS2CellId != 0UL) {
        CapturedS2CellId = other.CapturedS2CellId;
      }
      if (other.BattlesAttacked != 0) {
        BattlesAttacked = other.BattlesAttacked;
      }
      if (other.BattlesDefended != 0) {
        BattlesDefended = other.BattlesDefended;
      }
      if (other.EggIncubatorId != 0) {
        EggIncubatorId = other.EggIncubatorId;
      }
      if (other.CreationTimeMs != 0L) {
        CreationTimeMs = other.CreationTimeMs;
      }
      if (other.NumUpgrades != 0) {
        NumUpgrades = other.NumUpgrades;
      }
      if (other.AdditionalCpMultiplier != 0F) {
        AdditionalCpMultiplier = other.AdditionalCpMultiplier;
      }
      if (other.Favorite != false) {
        Favorite = other.Favorite;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.FromFort != false) {
        FromFort = other.FromFort;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            EntId = input.ReadFixed64();
            break;
          }
          case 16: {
            PokemonId = input.ReadInt32();
            break;
          }
          case 24: {
            Cp = input.ReadInt32();
            break;
          }
          case 32: {
            Stamina = input.ReadInt32();
            break;
          }
          case 40: {
            MaxStamina = input.ReadInt32();
            break;
          }
          case 48: {
            Move1 = input.ReadInt32();
            break;
          }
          case 56: {
            Move2 = input.ReadInt32();
            break;
          }
          case 64: {
            DeployedFortId = input.ReadInt32();
            break;
          }
          case 74: {
            OwnerName = input.ReadString();
            break;
          }
          case 80: {
            IsEgg = input.ReadBool();
            break;
          }
          case 89: {
            EggKmWalkedTarget = input.ReadDouble();
            break;
          }
          case 97: {
            EggKmWalkedStart = input.ReadDouble();
            break;
          }
          case 112: {
            Origin = input.ReadInt32();
            break;
          }
          case 125: {
            HeightM = input.ReadFloat();
            break;
          }
          case 133: {
            WeightKg = input.ReadFloat();
            break;
          }
          case 136: {
            IndividualAttack = input.ReadInt32();
            break;
          }
          case 144: {
            IndividualDefense = input.ReadInt32();
            break;
          }
          case 152: {
            IndividualStamina = input.ReadInt32();
            break;
          }
          case 165: {
            CpMultiplier = input.ReadFloat();
            break;
          }
          case 168: {
            Pokeball = input.ReadInt32();
            break;
          }
          case 176: {
            CapturedS2CellId = input.ReadUInt64();
            break;
          }
          case 184: {
            BattlesAttacked = input.ReadInt32();
            break;
          }
          case 192: {
            BattlesDefended = input.ReadInt32();
            break;
          }
          case 200: {
            EggIncubatorId = input.ReadInt32();
            break;
          }
          case 208: {
            CreationTimeMs = input.ReadInt64();
            break;
          }
          case 216: {
            NumUpgrades = input.ReadInt32();
            break;
          }
          case 229: {
            AdditionalCpMultiplier = input.ReadFloat();
            break;
          }
          case 232: {
            Favorite = input.ReadBool();
            break;
          }
          case 242: {
            Nickname = input.ReadString();
            break;
          }
          case 248: {
            FromFort = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class InventoryResponseProto : pb::IMessage<InventoryResponseProto> {
    private static readonly pb::MessageParser<InventoryResponseProto> _parser = new pb::MessageParser<InventoryResponseProto>(() => new InventoryResponseProto());
    public static pb::MessageParser<InventoryResponseProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.InventoryReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public InventoryResponseProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public InventoryResponseProto(InventoryResponseProto other) : this() {
      timestamp_ = other.timestamp_;
      items_ = other.items_.Clone();
    }

    public InventoryResponseProto Clone() {
      return new InventoryResponseProto(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PokemonGoApi.Proto.InventoryResponseProto.Types.InventoryItemResponseProto> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::PokemonGoApi.Proto.InventoryResponseProto.Types.InventoryItemResponseProto.Parser);
    private readonly pbc::RepeatedField<global::PokemonGoApi.Proto.InventoryResponseProto.Types.InventoryItemResponseProto> items_ = new pbc::RepeatedField<global::PokemonGoApi.Proto.InventoryResponseProto.Types.InventoryItemResponseProto>();
    public pbc::RepeatedField<global::PokemonGoApi.Proto.InventoryResponseProto.Types.InventoryItemResponseProto> Items {
      get { return items_; }
    }

    public override bool Equals(object other) {
      return Equals(other as InventoryResponseProto);
    }

    public bool Equals(InventoryResponseProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(InventoryResponseProto other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      items_.Add(other.items_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InventoryResponseProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class InventoryItemResponseProto : pb::IMessage<InventoryItemResponseProto> {
        private static readonly pb::MessageParser<InventoryItemResponseProto> _parser = new pb::MessageParser<InventoryItemResponseProto>(() => new InventoryItemResponseProto());
        public static pb::MessageParser<InventoryItemResponseProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.InventoryResponseProto.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public InventoryItemResponseProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public InventoryItemResponseProto(InventoryItemResponseProto other) : this() {
          timestamp_ = other.timestamp_;
          Item = other.item_ != null ? other.Item.Clone() : null;
        }

        public InventoryItemResponseProto Clone() {
          return new InventoryItemResponseProto(this);
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 1;
        private long timestamp_;
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        /// <summary>Field number for the "item" field.</summary>
        public const int ItemFieldNumber = 3;
        private global::PokemonGoApi.Proto.InventoryItemProto item_;
        public global::PokemonGoApi.Proto.InventoryItemProto Item {
          get { return item_; }
          set {
            item_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as InventoryItemResponseProto);
        }

        public bool Equals(InventoryItemResponseProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Timestamp != other.Timestamp) return false;
          if (!object.Equals(Item, other.Item)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          if (item_ != null) hash ^= Item.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Timestamp != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Timestamp);
          }
          if (item_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Item);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          if (item_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
          }
          return size;
        }

        public void MergeFrom(InventoryItemResponseProto other) {
          if (other == null) {
            return;
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
          if (other.item_ != null) {
            if (item_ == null) {
              item_ = new global::PokemonGoApi.Proto.InventoryItemProto();
            }
            Item.MergeFrom(other.Item);
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Timestamp = input.ReadInt64();
                break;
              }
              case 26: {
                if (item_ == null) {
                  item_ = new global::PokemonGoApi.Proto.InventoryItemProto();
                }
                input.ReadMessage(item_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class InventoryItemProto : pb::IMessage<InventoryItemProto> {
    private static readonly pb::MessageParser<InventoryItemProto> _parser = new pb::MessageParser<InventoryItemProto>(() => new InventoryItemProto());
    public static pb::MessageParser<InventoryItemProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.InventoryReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public InventoryItemProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public InventoryItemProto(InventoryItemProto other) : this() {
      Pokemon = other.pokemon_ != null ? other.Pokemon.Clone() : null;
      Item = other.item_ != null ? other.Item.Clone() : null;
      PokedexEntry = other.pokedexEntry_ != null ? other.PokedexEntry.Clone() : null;
      PlayerStats = other.playerStats_ != null ? other.PlayerStats.Clone() : null;
      PlayerCurrency = other.playerCurrency_ != null ? other.PlayerCurrency.Clone() : null;
      PlayerCamera = other.playerCamera_ != null ? other.PlayerCamera.Clone() : null;
      InventoryUpgrades = other.inventoryUpgrades_ != null ? other.InventoryUpgrades.Clone() : null;
      AppliedItem = other.appliedItem_ != null ? other.AppliedItem.Clone() : null;
      EggIncubators = other.eggIncubators_ != null ? other.EggIncubators.Clone() : null;
      PokemonFamily = other.pokemonFamily_ != null ? other.PokemonFamily.Clone() : null;
    }

    public InventoryItemProto Clone() {
      return new InventoryItemProto(this);
    }

    /// <summary>Field number for the "Pokemon" field.</summary>
    public const int PokemonFieldNumber = 1;
    private global::PokemonGoApi.Proto.PokemonProto pokemon_;
    public global::PokemonGoApi.Proto.PokemonProto Pokemon {
      get { return pokemon_; }
      set {
        pokemon_ = value;
      }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::PokemonGoApi.Proto.InventoryItemProto.Types.ItemProto item_;
    public global::PokemonGoApi.Proto.InventoryItemProto.Types.ItemProto Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "PokedexEntry" field.</summary>
    public const int PokedexEntryFieldNumber = 3;
    private global::PokemonGoApi.Proto.InventoryItemProto.Types.PokedexEntryProto pokedexEntry_;
    public global::PokemonGoApi.Proto.InventoryItemProto.Types.PokedexEntryProto PokedexEntry {
      get { return pokedexEntry_; }
      set {
        pokedexEntry_ = value;
      }
    }

    /// <summary>Field number for the "PlayerStats" field.</summary>
    public const int PlayerStatsFieldNumber = 4;
    private global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerStatsProto playerStats_;
    public global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerStatsProto PlayerStats {
      get { return playerStats_; }
      set {
        playerStats_ = value;
      }
    }

    /// <summary>Field number for the "PlayerCurrency" field.</summary>
    public const int PlayerCurrencyFieldNumber = 5;
    private global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCurrencyProto playerCurrency_;
    public global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCurrencyProto PlayerCurrency {
      get { return playerCurrency_; }
      set {
        playerCurrency_ = value;
      }
    }

    /// <summary>Field number for the "PlayerCamera" field.</summary>
    public const int PlayerCameraFieldNumber = 6;
    private global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCameraProto playerCamera_;
    public global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCameraProto PlayerCamera {
      get { return playerCamera_; }
      set {
        playerCamera_ = value;
      }
    }

    /// <summary>Field number for the "InventoryUpgrades" field.</summary>
    public const int InventoryUpgradesFieldNumber = 7;
    private global::PokemonGoApi.Proto.InventoryItemProto.Types.InventoryUpgradesProto inventoryUpgrades_;
    public global::PokemonGoApi.Proto.InventoryItemProto.Types.InventoryUpgradesProto InventoryUpgrades {
      get { return inventoryUpgrades_; }
      set {
        inventoryUpgrades_ = value;
      }
    }

    /// <summary>Field number for the "AppliedItem" field.</summary>
    public const int AppliedItemFieldNumber = 8;
    private global::PokemonGoApi.Proto.InventoryItemProto.Types.AppliedItemProto appliedItem_;
    public global::PokemonGoApi.Proto.InventoryItemProto.Types.AppliedItemProto AppliedItem {
      get { return appliedItem_; }
      set {
        appliedItem_ = value;
      }
    }

    /// <summary>Field number for the "EggIncubators" field.</summary>
    public const int EggIncubatorsFieldNumber = 9;
    private global::PokemonGoApi.Proto.InventoryItemProto.Types.EggIncubatorProto eggIncubators_;
    public global::PokemonGoApi.Proto.InventoryItemProto.Types.EggIncubatorProto EggIncubators {
      get { return eggIncubators_; }
      set {
        eggIncubators_ = value;
      }
    }

    /// <summary>Field number for the "PokemonFamily" field.</summary>
    public const int PokemonFamilyFieldNumber = 10;
    private global::PokemonGoApi.Proto.InventoryItemProto.Types.PokemonFamilyProto pokemonFamily_;
    public global::PokemonGoApi.Proto.InventoryItemProto.Types.PokemonFamilyProto PokemonFamily {
      get { return pokemonFamily_; }
      set {
        pokemonFamily_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as InventoryItemProto);
    }

    public bool Equals(InventoryItemProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pokemon, other.Pokemon)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(PokedexEntry, other.PokedexEntry)) return false;
      if (!object.Equals(PlayerStats, other.PlayerStats)) return false;
      if (!object.Equals(PlayerCurrency, other.PlayerCurrency)) return false;
      if (!object.Equals(PlayerCamera, other.PlayerCamera)) return false;
      if (!object.Equals(InventoryUpgrades, other.InventoryUpgrades)) return false;
      if (!object.Equals(AppliedItem, other.AppliedItem)) return false;
      if (!object.Equals(EggIncubators, other.EggIncubators)) return false;
      if (!object.Equals(PokemonFamily, other.PokemonFamily)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (pokemon_ != null) hash ^= Pokemon.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (pokedexEntry_ != null) hash ^= PokedexEntry.GetHashCode();
      if (playerStats_ != null) hash ^= PlayerStats.GetHashCode();
      if (playerCurrency_ != null) hash ^= PlayerCurrency.GetHashCode();
      if (playerCamera_ != null) hash ^= PlayerCamera.GetHashCode();
      if (inventoryUpgrades_ != null) hash ^= InventoryUpgrades.GetHashCode();
      if (appliedItem_ != null) hash ^= AppliedItem.GetHashCode();
      if (eggIncubators_ != null) hash ^= EggIncubators.GetHashCode();
      if (pokemonFamily_ != null) hash ^= PokemonFamily.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pokemon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pokemon);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
      if (pokedexEntry_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PokedexEntry);
      }
      if (playerStats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerStats);
      }
      if (playerCurrency_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerCurrency);
      }
      if (playerCamera_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayerCamera);
      }
      if (inventoryUpgrades_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(InventoryUpgrades);
      }
      if (appliedItem_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(AppliedItem);
      }
      if (eggIncubators_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EggIncubators);
      }
      if (pokemonFamily_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(PokemonFamily);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pokemon);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (pokedexEntry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PokedexEntry);
      }
      if (playerStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerStats);
      }
      if (playerCurrency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerCurrency);
      }
      if (playerCamera_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerCamera);
      }
      if (inventoryUpgrades_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InventoryUpgrades);
      }
      if (appliedItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AppliedItem);
      }
      if (eggIncubators_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EggIncubators);
      }
      if (pokemonFamily_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PokemonFamily);
      }
      return size;
    }

    public void MergeFrom(InventoryItemProto other) {
      if (other == null) {
        return;
      }
      if (other.pokemon_ != null) {
        if (pokemon_ == null) {
          pokemon_ = new global::PokemonGoApi.Proto.PokemonProto();
        }
        Pokemon.MergeFrom(other.Pokemon);
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.ItemProto();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.pokedexEntry_ != null) {
        if (pokedexEntry_ == null) {
          pokedexEntry_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.PokedexEntryProto();
        }
        PokedexEntry.MergeFrom(other.PokedexEntry);
      }
      if (other.playerStats_ != null) {
        if (playerStats_ == null) {
          playerStats_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerStatsProto();
        }
        PlayerStats.MergeFrom(other.PlayerStats);
      }
      if (other.playerCurrency_ != null) {
        if (playerCurrency_ == null) {
          playerCurrency_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCurrencyProto();
        }
        PlayerCurrency.MergeFrom(other.PlayerCurrency);
      }
      if (other.playerCamera_ != null) {
        if (playerCamera_ == null) {
          playerCamera_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCameraProto();
        }
        PlayerCamera.MergeFrom(other.PlayerCamera);
      }
      if (other.inventoryUpgrades_ != null) {
        if (inventoryUpgrades_ == null) {
          inventoryUpgrades_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.InventoryUpgradesProto();
        }
        InventoryUpgrades.MergeFrom(other.InventoryUpgrades);
      }
      if (other.appliedItem_ != null) {
        if (appliedItem_ == null) {
          appliedItem_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.AppliedItemProto();
        }
        AppliedItem.MergeFrom(other.AppliedItem);
      }
      if (other.eggIncubators_ != null) {
        if (eggIncubators_ == null) {
          eggIncubators_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.EggIncubatorProto();
        }
        EggIncubators.MergeFrom(other.EggIncubators);
      }
      if (other.pokemonFamily_ != null) {
        if (pokemonFamily_ == null) {
          pokemonFamily_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.PokemonFamilyProto();
        }
        PokemonFamily.MergeFrom(other.PokemonFamily);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pokemon_ == null) {
              pokemon_ = new global::PokemonGoApi.Proto.PokemonProto();
            }
            input.ReadMessage(pokemon_);
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.ItemProto();
            }
            input.ReadMessage(item_);
            break;
          }
          case 26: {
            if (pokedexEntry_ == null) {
              pokedexEntry_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.PokedexEntryProto();
            }
            input.ReadMessage(pokedexEntry_);
            break;
          }
          case 34: {
            if (playerStats_ == null) {
              playerStats_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerStatsProto();
            }
            input.ReadMessage(playerStats_);
            break;
          }
          case 42: {
            if (playerCurrency_ == null) {
              playerCurrency_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCurrencyProto();
            }
            input.ReadMessage(playerCurrency_);
            break;
          }
          case 50: {
            if (playerCamera_ == null) {
              playerCamera_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.PlayerCameraProto();
            }
            input.ReadMessage(playerCamera_);
            break;
          }
          case 58: {
            if (inventoryUpgrades_ == null) {
              inventoryUpgrades_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.InventoryUpgradesProto();
            }
            input.ReadMessage(inventoryUpgrades_);
            break;
          }
          case 66: {
            if (appliedItem_ == null) {
              appliedItem_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.AppliedItemProto();
            }
            input.ReadMessage(appliedItem_);
            break;
          }
          case 74: {
            if (eggIncubators_ == null) {
              eggIncubators_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.EggIncubatorProto();
            }
            input.ReadMessage(eggIncubators_);
            break;
          }
          case 82: {
            if (pokemonFamily_ == null) {
              pokemonFamily_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.PokemonFamilyProto();
            }
            input.ReadMessage(pokemonFamily_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InventoryItemProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ItemProto : pb::IMessage<ItemProto> {
        private static readonly pb::MessageParser<ItemProto> _parser = new pb::MessageParser<ItemProto>(() => new ItemProto());
        public static pb::MessageParser<ItemProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.InventoryItemProto.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public ItemProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public ItemProto(ItemProto other) : this() {
          item_ = other.item_;
          count_ = other.count_;
          unseen_ = other.unseen_;
        }

        public ItemProto Clone() {
          return new ItemProto(this);
        }

        /// <summary>Field number for the "Item" field.</summary>
        public const int ItemFieldNumber = 1;
        private int item_;
        public int Item {
          get { return item_; }
          set {
            item_ = value;
          }
        }

        /// <summary>Field number for the "Count" field.</summary>
        public const int CountFieldNumber = 2;
        private int count_;
        public int Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "Unseen" field.</summary>
        public const int UnseenFieldNumber = 3;
        private bool unseen_;
        public bool Unseen {
          get { return unseen_; }
          set {
            unseen_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as ItemProto);
        }

        public bool Equals(ItemProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Item != other.Item) return false;
          if (Count != other.Count) return false;
          if (Unseen != other.Unseen) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Item != 0) hash ^= Item.GetHashCode();
          if (Count != 0) hash ^= Count.GetHashCode();
          if (Unseen != false) hash ^= Unseen.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Item != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Item);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Count);
          }
          if (Unseen != false) {
            output.WriteRawTag(24);
            output.WriteBool(Unseen);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Item != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
          }
          if (Unseen != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(ItemProto other) {
          if (other == null) {
            return;
          }
          if (other.Item != 0) {
            Item = other.Item;
          }
          if (other.Count != 0) {
            Count = other.Count;
          }
          if (other.Unseen != false) {
            Unseen = other.Unseen;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Item = input.ReadInt32();
                break;
              }
              case 16: {
                Count = input.ReadInt32();
                break;
              }
              case 24: {
                Unseen = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class PokedexEntryProto : pb::IMessage<PokedexEntryProto> {
        private static readonly pb::MessageParser<PokedexEntryProto> _parser = new pb::MessageParser<PokedexEntryProto>(() => new PokedexEntryProto());
        public static pb::MessageParser<PokedexEntryProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.InventoryItemProto.Descriptor.NestedTypes[1]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public PokedexEntryProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public PokedexEntryProto(PokedexEntryProto other) : this() {
          pokedexEntryNumber_ = other.pokedexEntryNumber_;
          timesEncountered_ = other.timesEncountered_;
          timesCaptured_ = other.timesCaptured_;
          evolutionStonePieces_ = other.evolutionStonePieces_;
          evolutionStones_ = other.evolutionStones_;
        }

        public PokedexEntryProto Clone() {
          return new PokedexEntryProto(this);
        }

        /// <summary>Field number for the "PokedexEntryNumber" field.</summary>
        public const int PokedexEntryNumberFieldNumber = 1;
        private int pokedexEntryNumber_;
        public int PokedexEntryNumber {
          get { return pokedexEntryNumber_; }
          set {
            pokedexEntryNumber_ = value;
          }
        }

        /// <summary>Field number for the "TimesEncountered" field.</summary>
        public const int TimesEncounteredFieldNumber = 2;
        private int timesEncountered_;
        public int TimesEncountered {
          get { return timesEncountered_; }
          set {
            timesEncountered_ = value;
          }
        }

        /// <summary>Field number for the "TimesCaptured" field.</summary>
        public const int TimesCapturedFieldNumber = 3;
        private int timesCaptured_;
        public int TimesCaptured {
          get { return timesCaptured_; }
          set {
            timesCaptured_ = value;
          }
        }

        /// <summary>Field number for the "EvolutionStonePieces" field.</summary>
        public const int EvolutionStonePiecesFieldNumber = 4;
        private int evolutionStonePieces_;
        public int EvolutionStonePieces {
          get { return evolutionStonePieces_; }
          set {
            evolutionStonePieces_ = value;
          }
        }

        /// <summary>Field number for the "EvolutionStones" field.</summary>
        public const int EvolutionStonesFieldNumber = 5;
        private int evolutionStones_;
        public int EvolutionStones {
          get { return evolutionStones_; }
          set {
            evolutionStones_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as PokedexEntryProto);
        }

        public bool Equals(PokedexEntryProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PokedexEntryNumber != other.PokedexEntryNumber) return false;
          if (TimesEncountered != other.TimesEncountered) return false;
          if (TimesCaptured != other.TimesCaptured) return false;
          if (EvolutionStonePieces != other.EvolutionStonePieces) return false;
          if (EvolutionStones != other.EvolutionStones) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (PokedexEntryNumber != 0) hash ^= PokedexEntryNumber.GetHashCode();
          if (TimesEncountered != 0) hash ^= TimesEncountered.GetHashCode();
          if (TimesCaptured != 0) hash ^= TimesCaptured.GetHashCode();
          if (EvolutionStonePieces != 0) hash ^= EvolutionStonePieces.GetHashCode();
          if (EvolutionStones != 0) hash ^= EvolutionStones.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PokedexEntryNumber != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PokedexEntryNumber);
          }
          if (TimesEncountered != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TimesEncountered);
          }
          if (TimesCaptured != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(TimesCaptured);
          }
          if (EvolutionStonePieces != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(EvolutionStonePieces);
          }
          if (EvolutionStones != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(EvolutionStones);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PokedexEntryNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokedexEntryNumber);
          }
          if (TimesEncountered != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesEncountered);
          }
          if (TimesCaptured != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesCaptured);
          }
          if (EvolutionStonePieces != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EvolutionStonePieces);
          }
          if (EvolutionStones != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EvolutionStones);
          }
          return size;
        }

        public void MergeFrom(PokedexEntryProto other) {
          if (other == null) {
            return;
          }
          if (other.PokedexEntryNumber != 0) {
            PokedexEntryNumber = other.PokedexEntryNumber;
          }
          if (other.TimesEncountered != 0) {
            TimesEncountered = other.TimesEncountered;
          }
          if (other.TimesCaptured != 0) {
            TimesCaptured = other.TimesCaptured;
          }
          if (other.EvolutionStonePieces != 0) {
            EvolutionStonePieces = other.EvolutionStonePieces;
          }
          if (other.EvolutionStones != 0) {
            EvolutionStones = other.EvolutionStones;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PokedexEntryNumber = input.ReadInt32();
                break;
              }
              case 16: {
                TimesEncountered = input.ReadInt32();
                break;
              }
              case 24: {
                TimesCaptured = input.ReadInt32();
                break;
              }
              case 32: {
                EvolutionStonePieces = input.ReadInt32();
                break;
              }
              case 40: {
                EvolutionStones = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class PlayerStatsProto : pb::IMessage<PlayerStatsProto> {
        private static readonly pb::MessageParser<PlayerStatsProto> _parser = new pb::MessageParser<PlayerStatsProto>(() => new PlayerStatsProto());
        public static pb::MessageParser<PlayerStatsProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.InventoryItemProto.Descriptor.NestedTypes[2]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public PlayerStatsProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public PlayerStatsProto(PlayerStatsProto other) : this() {
          level_ = other.level_;
          experience_ = other.experience_;
          prevLevelExp_ = other.prevLevelExp_;
          nextLevelExp_ = other.nextLevelExp_;
          kmWalked_ = other.kmWalked_;
          numPokemonEncountered_ = other.numPokemonEncountered_;
          numUniquePokedexEntries_ = other.numUniquePokedexEntries_;
          numPokemonCaptured_ = other.numPokemonCaptured_;
          numEvolutions_ = other.numEvolutions_;
          pokeStopVisits_ = other.pokeStopVisits_;
          numberOfPokeballThrown_ = other.numberOfPokeballThrown_;
          numEggsHatched_ = other.numEggsHatched_;
          bigMagikarpCaught_ = other.bigMagikarpCaught_;
          numBattleAttackWon_ = other.numBattleAttackWon_;
          numBattleAttackTotal_ = other.numBattleAttackTotal_;
          numBattleDefendedWon_ = other.numBattleDefendedWon_;
          numBattleTrainingWon_ = other.numBattleTrainingWon_;
          numBattleTrainingTotal_ = other.numBattleTrainingTotal_;
          prestigeRaisedTotal_ = other.prestigeRaisedTotal_;
          prestigeDroppedTotal_ = other.prestigeDroppedTotal_;
          numPokemonDeployed_ = other.numPokemonDeployed_;
          smallRattataCaught_ = other.smallRattataCaught_;
        }

        public PlayerStatsProto Clone() {
          return new PlayerStatsProto(this);
        }

        /// <summary>Field number for the "Level" field.</summary>
        public const int LevelFieldNumber = 1;
        private int level_;
        public int Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "Experience" field.</summary>
        public const int ExperienceFieldNumber = 2;
        private long experience_;
        public long Experience {
          get { return experience_; }
          set {
            experience_ = value;
          }
        }

        /// <summary>Field number for the "PrevLevelExp" field.</summary>
        public const int PrevLevelExpFieldNumber = 3;
        private long prevLevelExp_;
        public long PrevLevelExp {
          get { return prevLevelExp_; }
          set {
            prevLevelExp_ = value;
          }
        }

        /// <summary>Field number for the "NextLevelExp" field.</summary>
        public const int NextLevelExpFieldNumber = 4;
        private long nextLevelExp_;
        public long NextLevelExp {
          get { return nextLevelExp_; }
          set {
            nextLevelExp_ = value;
          }
        }

        /// <summary>Field number for the "KmWalked" field.</summary>
        public const int KmWalkedFieldNumber = 5;
        private float kmWalked_;
        public float KmWalked {
          get { return kmWalked_; }
          set {
            kmWalked_ = value;
          }
        }

        /// <summary>Field number for the "NumPokemonEncountered" field.</summary>
        public const int NumPokemonEncounteredFieldNumber = 6;
        private int numPokemonEncountered_;
        public int NumPokemonEncountered {
          get { return numPokemonEncountered_; }
          set {
            numPokemonEncountered_ = value;
          }
        }

        /// <summary>Field number for the "NumUniquePokedexEntries" field.</summary>
        public const int NumUniquePokedexEntriesFieldNumber = 7;
        private int numUniquePokedexEntries_;
        public int NumUniquePokedexEntries {
          get { return numUniquePokedexEntries_; }
          set {
            numUniquePokedexEntries_ = value;
          }
        }

        /// <summary>Field number for the "NumPokemonCaptured" field.</summary>
        public const int NumPokemonCapturedFieldNumber = 8;
        private int numPokemonCaptured_;
        public int NumPokemonCaptured {
          get { return numPokemonCaptured_; }
          set {
            numPokemonCaptured_ = value;
          }
        }

        /// <summary>Field number for the "NumEvolutions" field.</summary>
        public const int NumEvolutionsFieldNumber = 9;
        private int numEvolutions_;
        public int NumEvolutions {
          get { return numEvolutions_; }
          set {
            numEvolutions_ = value;
          }
        }

        /// <summary>Field number for the "PokeStopVisits" field.</summary>
        public const int PokeStopVisitsFieldNumber = 10;
        private int pokeStopVisits_;
        public int PokeStopVisits {
          get { return pokeStopVisits_; }
          set {
            pokeStopVisits_ = value;
          }
        }

        /// <summary>Field number for the "NumberOfPokeballThrown" field.</summary>
        public const int NumberOfPokeballThrownFieldNumber = 11;
        private int numberOfPokeballThrown_;
        public int NumberOfPokeballThrown {
          get { return numberOfPokeballThrown_; }
          set {
            numberOfPokeballThrown_ = value;
          }
        }

        /// <summary>Field number for the "NumEggsHatched" field.</summary>
        public const int NumEggsHatchedFieldNumber = 12;
        private int numEggsHatched_;
        public int NumEggsHatched {
          get { return numEggsHatched_; }
          set {
            numEggsHatched_ = value;
          }
        }

        /// <summary>Field number for the "BigMagikarpCaught" field.</summary>
        public const int BigMagikarpCaughtFieldNumber = 13;
        private int bigMagikarpCaught_;
        public int BigMagikarpCaught {
          get { return bigMagikarpCaught_; }
          set {
            bigMagikarpCaught_ = value;
          }
        }

        /// <summary>Field number for the "NumBattleAttackWon" field.</summary>
        public const int NumBattleAttackWonFieldNumber = 14;
        private int numBattleAttackWon_;
        public int NumBattleAttackWon {
          get { return numBattleAttackWon_; }
          set {
            numBattleAttackWon_ = value;
          }
        }

        /// <summary>Field number for the "NumBattleAttackTotal" field.</summary>
        public const int NumBattleAttackTotalFieldNumber = 15;
        private int numBattleAttackTotal_;
        public int NumBattleAttackTotal {
          get { return numBattleAttackTotal_; }
          set {
            numBattleAttackTotal_ = value;
          }
        }

        /// <summary>Field number for the "NumBattleDefendedWon" field.</summary>
        public const int NumBattleDefendedWonFieldNumber = 16;
        private int numBattleDefendedWon_;
        public int NumBattleDefendedWon {
          get { return numBattleDefendedWon_; }
          set {
            numBattleDefendedWon_ = value;
          }
        }

        /// <summary>Field number for the "NumBattleTrainingWon" field.</summary>
        public const int NumBattleTrainingWonFieldNumber = 17;
        private int numBattleTrainingWon_;
        public int NumBattleTrainingWon {
          get { return numBattleTrainingWon_; }
          set {
            numBattleTrainingWon_ = value;
          }
        }

        /// <summary>Field number for the "NumBattleTrainingTotal" field.</summary>
        public const int NumBattleTrainingTotalFieldNumber = 18;
        private int numBattleTrainingTotal_;
        public int NumBattleTrainingTotal {
          get { return numBattleTrainingTotal_; }
          set {
            numBattleTrainingTotal_ = value;
          }
        }

        /// <summary>Field number for the "PrestigeRaisedTotal" field.</summary>
        public const int PrestigeRaisedTotalFieldNumber = 19;
        private int prestigeRaisedTotal_;
        public int PrestigeRaisedTotal {
          get { return prestigeRaisedTotal_; }
          set {
            prestigeRaisedTotal_ = value;
          }
        }

        /// <summary>Field number for the "PrestigeDroppedTotal" field.</summary>
        public const int PrestigeDroppedTotalFieldNumber = 20;
        private int prestigeDroppedTotal_;
        public int PrestigeDroppedTotal {
          get { return prestigeDroppedTotal_; }
          set {
            prestigeDroppedTotal_ = value;
          }
        }

        /// <summary>Field number for the "NumPokemonDeployed" field.</summary>
        public const int NumPokemonDeployedFieldNumber = 21;
        private int numPokemonDeployed_;
        public int NumPokemonDeployed {
          get { return numPokemonDeployed_; }
          set {
            numPokemonDeployed_ = value;
          }
        }

        /// <summary>Field number for the "SmallRattataCaught" field.</summary>
        public const int SmallRattataCaughtFieldNumber = 23;
        private int smallRattataCaught_;
        public int SmallRattataCaught {
          get { return smallRattataCaught_; }
          set {
            smallRattataCaught_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as PlayerStatsProto);
        }

        public bool Equals(PlayerStatsProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Level != other.Level) return false;
          if (Experience != other.Experience) return false;
          if (PrevLevelExp != other.PrevLevelExp) return false;
          if (NextLevelExp != other.NextLevelExp) return false;
          if (KmWalked != other.KmWalked) return false;
          if (NumPokemonEncountered != other.NumPokemonEncountered) return false;
          if (NumUniquePokedexEntries != other.NumUniquePokedexEntries) return false;
          if (NumPokemonCaptured != other.NumPokemonCaptured) return false;
          if (NumEvolutions != other.NumEvolutions) return false;
          if (PokeStopVisits != other.PokeStopVisits) return false;
          if (NumberOfPokeballThrown != other.NumberOfPokeballThrown) return false;
          if (NumEggsHatched != other.NumEggsHatched) return false;
          if (BigMagikarpCaught != other.BigMagikarpCaught) return false;
          if (NumBattleAttackWon != other.NumBattleAttackWon) return false;
          if (NumBattleAttackTotal != other.NumBattleAttackTotal) return false;
          if (NumBattleDefendedWon != other.NumBattleDefendedWon) return false;
          if (NumBattleTrainingWon != other.NumBattleTrainingWon) return false;
          if (NumBattleTrainingTotal != other.NumBattleTrainingTotal) return false;
          if (PrestigeRaisedTotal != other.PrestigeRaisedTotal) return false;
          if (PrestigeDroppedTotal != other.PrestigeDroppedTotal) return false;
          if (NumPokemonDeployed != other.NumPokemonDeployed) return false;
          if (SmallRattataCaught != other.SmallRattataCaught) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Level != 0) hash ^= Level.GetHashCode();
          if (Experience != 0L) hash ^= Experience.GetHashCode();
          if (PrevLevelExp != 0L) hash ^= PrevLevelExp.GetHashCode();
          if (NextLevelExp != 0L) hash ^= NextLevelExp.GetHashCode();
          if (KmWalked != 0F) hash ^= KmWalked.GetHashCode();
          if (NumPokemonEncountered != 0) hash ^= NumPokemonEncountered.GetHashCode();
          if (NumUniquePokedexEntries != 0) hash ^= NumUniquePokedexEntries.GetHashCode();
          if (NumPokemonCaptured != 0) hash ^= NumPokemonCaptured.GetHashCode();
          if (NumEvolutions != 0) hash ^= NumEvolutions.GetHashCode();
          if (PokeStopVisits != 0) hash ^= PokeStopVisits.GetHashCode();
          if (NumberOfPokeballThrown != 0) hash ^= NumberOfPokeballThrown.GetHashCode();
          if (NumEggsHatched != 0) hash ^= NumEggsHatched.GetHashCode();
          if (BigMagikarpCaught != 0) hash ^= BigMagikarpCaught.GetHashCode();
          if (NumBattleAttackWon != 0) hash ^= NumBattleAttackWon.GetHashCode();
          if (NumBattleAttackTotal != 0) hash ^= NumBattleAttackTotal.GetHashCode();
          if (NumBattleDefendedWon != 0) hash ^= NumBattleDefendedWon.GetHashCode();
          if (NumBattleTrainingWon != 0) hash ^= NumBattleTrainingWon.GetHashCode();
          if (NumBattleTrainingTotal != 0) hash ^= NumBattleTrainingTotal.GetHashCode();
          if (PrestigeRaisedTotal != 0) hash ^= PrestigeRaisedTotal.GetHashCode();
          if (PrestigeDroppedTotal != 0) hash ^= PrestigeDroppedTotal.GetHashCode();
          if (NumPokemonDeployed != 0) hash ^= NumPokemonDeployed.GetHashCode();
          if (SmallRattataCaught != 0) hash ^= SmallRattataCaught.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Level);
          }
          if (Experience != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Experience);
          }
          if (PrevLevelExp != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(PrevLevelExp);
          }
          if (NextLevelExp != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(NextLevelExp);
          }
          if (KmWalked != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(KmWalked);
          }
          if (NumPokemonEncountered != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(NumPokemonEncountered);
          }
          if (NumUniquePokedexEntries != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(NumUniquePokedexEntries);
          }
          if (NumPokemonCaptured != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(NumPokemonCaptured);
          }
          if (NumEvolutions != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(NumEvolutions);
          }
          if (PokeStopVisits != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(PokeStopVisits);
          }
          if (NumberOfPokeballThrown != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(NumberOfPokeballThrown);
          }
          if (NumEggsHatched != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(NumEggsHatched);
          }
          if (BigMagikarpCaught != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(BigMagikarpCaught);
          }
          if (NumBattleAttackWon != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(NumBattleAttackWon);
          }
          if (NumBattleAttackTotal != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(NumBattleAttackTotal);
          }
          if (NumBattleDefendedWon != 0) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(NumBattleDefendedWon);
          }
          if (NumBattleTrainingWon != 0) {
            output.WriteRawTag(136, 1);
            output.WriteInt32(NumBattleTrainingWon);
          }
          if (NumBattleTrainingTotal != 0) {
            output.WriteRawTag(144, 1);
            output.WriteInt32(NumBattleTrainingTotal);
          }
          if (PrestigeRaisedTotal != 0) {
            output.WriteRawTag(152, 1);
            output.WriteInt32(PrestigeRaisedTotal);
          }
          if (PrestigeDroppedTotal != 0) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(PrestigeDroppedTotal);
          }
          if (NumPokemonDeployed != 0) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(NumPokemonDeployed);
          }
          if (SmallRattataCaught != 0) {
            output.WriteRawTag(184, 1);
            output.WriteInt32(SmallRattataCaught);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
          }
          if (Experience != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Experience);
          }
          if (PrevLevelExp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PrevLevelExp);
          }
          if (NextLevelExp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextLevelExp);
          }
          if (KmWalked != 0F) {
            size += 1 + 4;
          }
          if (NumPokemonEncountered != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPokemonEncountered);
          }
          if (NumUniquePokedexEntries != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumUniquePokedexEntries);
          }
          if (NumPokemonCaptured != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPokemonCaptured);
          }
          if (NumEvolutions != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumEvolutions);
          }
          if (PokeStopVisits != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokeStopVisits);
          }
          if (NumberOfPokeballThrown != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfPokeballThrown);
          }
          if (NumEggsHatched != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumEggsHatched);
          }
          if (BigMagikarpCaught != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BigMagikarpCaught);
          }
          if (NumBattleAttackWon != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBattleAttackWon);
          }
          if (NumBattleAttackTotal != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBattleAttackTotal);
          }
          if (NumBattleDefendedWon != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumBattleDefendedWon);
          }
          if (NumBattleTrainingWon != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumBattleTrainingWon);
          }
          if (NumBattleTrainingTotal != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumBattleTrainingTotal);
          }
          if (PrestigeRaisedTotal != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrestigeRaisedTotal);
          }
          if (PrestigeDroppedTotal != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrestigeDroppedTotal);
          }
          if (NumPokemonDeployed != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumPokemonDeployed);
          }
          if (SmallRattataCaught != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SmallRattataCaught);
          }
          return size;
        }

        public void MergeFrom(PlayerStatsProto other) {
          if (other == null) {
            return;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          if (other.Experience != 0L) {
            Experience = other.Experience;
          }
          if (other.PrevLevelExp != 0L) {
            PrevLevelExp = other.PrevLevelExp;
          }
          if (other.NextLevelExp != 0L) {
            NextLevelExp = other.NextLevelExp;
          }
          if (other.KmWalked != 0F) {
            KmWalked = other.KmWalked;
          }
          if (other.NumPokemonEncountered != 0) {
            NumPokemonEncountered = other.NumPokemonEncountered;
          }
          if (other.NumUniquePokedexEntries != 0) {
            NumUniquePokedexEntries = other.NumUniquePokedexEntries;
          }
          if (other.NumPokemonCaptured != 0) {
            NumPokemonCaptured = other.NumPokemonCaptured;
          }
          if (other.NumEvolutions != 0) {
            NumEvolutions = other.NumEvolutions;
          }
          if (other.PokeStopVisits != 0) {
            PokeStopVisits = other.PokeStopVisits;
          }
          if (other.NumberOfPokeballThrown != 0) {
            NumberOfPokeballThrown = other.NumberOfPokeballThrown;
          }
          if (other.NumEggsHatched != 0) {
            NumEggsHatched = other.NumEggsHatched;
          }
          if (other.BigMagikarpCaught != 0) {
            BigMagikarpCaught = other.BigMagikarpCaught;
          }
          if (other.NumBattleAttackWon != 0) {
            NumBattleAttackWon = other.NumBattleAttackWon;
          }
          if (other.NumBattleAttackTotal != 0) {
            NumBattleAttackTotal = other.NumBattleAttackTotal;
          }
          if (other.NumBattleDefendedWon != 0) {
            NumBattleDefendedWon = other.NumBattleDefendedWon;
          }
          if (other.NumBattleTrainingWon != 0) {
            NumBattleTrainingWon = other.NumBattleTrainingWon;
          }
          if (other.NumBattleTrainingTotal != 0) {
            NumBattleTrainingTotal = other.NumBattleTrainingTotal;
          }
          if (other.PrestigeRaisedTotal != 0) {
            PrestigeRaisedTotal = other.PrestigeRaisedTotal;
          }
          if (other.PrestigeDroppedTotal != 0) {
            PrestigeDroppedTotal = other.PrestigeDroppedTotal;
          }
          if (other.NumPokemonDeployed != 0) {
            NumPokemonDeployed = other.NumPokemonDeployed;
          }
          if (other.SmallRattataCaught != 0) {
            SmallRattataCaught = other.SmallRattataCaught;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Level = input.ReadInt32();
                break;
              }
              case 16: {
                Experience = input.ReadInt64();
                break;
              }
              case 24: {
                PrevLevelExp = input.ReadInt64();
                break;
              }
              case 32: {
                NextLevelExp = input.ReadInt64();
                break;
              }
              case 45: {
                KmWalked = input.ReadFloat();
                break;
              }
              case 48: {
                NumPokemonEncountered = input.ReadInt32();
                break;
              }
              case 56: {
                NumUniquePokedexEntries = input.ReadInt32();
                break;
              }
              case 64: {
                NumPokemonCaptured = input.ReadInt32();
                break;
              }
              case 72: {
                NumEvolutions = input.ReadInt32();
                break;
              }
              case 80: {
                PokeStopVisits = input.ReadInt32();
                break;
              }
              case 88: {
                NumberOfPokeballThrown = input.ReadInt32();
                break;
              }
              case 96: {
                NumEggsHatched = input.ReadInt32();
                break;
              }
              case 104: {
                BigMagikarpCaught = input.ReadInt32();
                break;
              }
              case 112: {
                NumBattleAttackWon = input.ReadInt32();
                break;
              }
              case 120: {
                NumBattleAttackTotal = input.ReadInt32();
                break;
              }
              case 128: {
                NumBattleDefendedWon = input.ReadInt32();
                break;
              }
              case 136: {
                NumBattleTrainingWon = input.ReadInt32();
                break;
              }
              case 144: {
                NumBattleTrainingTotal = input.ReadInt32();
                break;
              }
              case 152: {
                PrestigeRaisedTotal = input.ReadInt32();
                break;
              }
              case 160: {
                PrestigeDroppedTotal = input.ReadInt32();
                break;
              }
              case 168: {
                NumPokemonDeployed = input.ReadInt32();
                break;
              }
              case 184: {
                SmallRattataCaught = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class AppliedItemProto : pb::IMessage<AppliedItemProto> {
        private static readonly pb::MessageParser<AppliedItemProto> _parser = new pb::MessageParser<AppliedItemProto>(() => new AppliedItemProto());
        public static pb::MessageParser<AppliedItemProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.InventoryItemProto.Descriptor.NestedTypes[3]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public AppliedItemProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public AppliedItemProto(AppliedItemProto other) : this() {
          item_ = other.item_;
          itemType_ = other.itemType_;
          expirationMs_ = other.expirationMs_;
          appliedMs_ = other.appliedMs_;
        }

        public AppliedItemProto Clone() {
          return new AppliedItemProto(this);
        }

        /// <summary>Field number for the "Item" field.</summary>
        public const int ItemFieldNumber = 1;
        private int item_;
        public int Item {
          get { return item_; }
          set {
            item_ = value;
          }
        }

        /// <summary>Field number for the "ItemType" field.</summary>
        public const int ItemTypeFieldNumber = 2;
        private int itemType_;
        public int ItemType {
          get { return itemType_; }
          set {
            itemType_ = value;
          }
        }

        /// <summary>Field number for the "ExpirationMs" field.</summary>
        public const int ExpirationMsFieldNumber = 3;
        private long expirationMs_;
        public long ExpirationMs {
          get { return expirationMs_; }
          set {
            expirationMs_ = value;
          }
        }

        /// <summary>Field number for the "AppliedMs" field.</summary>
        public const int AppliedMsFieldNumber = 4;
        private long appliedMs_;
        public long AppliedMs {
          get { return appliedMs_; }
          set {
            appliedMs_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as AppliedItemProto);
        }

        public bool Equals(AppliedItemProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Item != other.Item) return false;
          if (ItemType != other.ItemType) return false;
          if (ExpirationMs != other.ExpirationMs) return false;
          if (AppliedMs != other.AppliedMs) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Item != 0) hash ^= Item.GetHashCode();
          if (ItemType != 0) hash ^= ItemType.GetHashCode();
          if (ExpirationMs != 0L) hash ^= ExpirationMs.GetHashCode();
          if (AppliedMs != 0L) hash ^= AppliedMs.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Item != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Item);
          }
          if (ItemType != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(ItemType);
          }
          if (ExpirationMs != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(ExpirationMs);
          }
          if (AppliedMs != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(AppliedMs);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Item != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item);
          }
          if (ItemType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemType);
          }
          if (ExpirationMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationMs);
          }
          if (AppliedMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AppliedMs);
          }
          return size;
        }

        public void MergeFrom(AppliedItemProto other) {
          if (other == null) {
            return;
          }
          if (other.Item != 0) {
            Item = other.Item;
          }
          if (other.ItemType != 0) {
            ItemType = other.ItemType;
          }
          if (other.ExpirationMs != 0L) {
            ExpirationMs = other.ExpirationMs;
          }
          if (other.AppliedMs != 0L) {
            AppliedMs = other.AppliedMs;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Item = input.ReadInt32();
                break;
              }
              case 16: {
                ItemType = input.ReadInt32();
                break;
              }
              case 24: {
                ExpirationMs = input.ReadInt64();
                break;
              }
              case 32: {
                AppliedMs = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class PlayerCameraProto : pb::IMessage<PlayerCameraProto> {
        private static readonly pb::MessageParser<PlayerCameraProto> _parser = new pb::MessageParser<PlayerCameraProto>(() => new PlayerCameraProto());
        public static pb::MessageParser<PlayerCameraProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.InventoryItemProto.Descriptor.NestedTypes[4]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public PlayerCameraProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public PlayerCameraProto(PlayerCameraProto other) : this() {
          defaultCamera_ = other.defaultCamera_;
        }

        public PlayerCameraProto Clone() {
          return new PlayerCameraProto(this);
        }

        /// <summary>Field number for the "DefaultCamera" field.</summary>
        public const int DefaultCameraFieldNumber = 1;
        private bool defaultCamera_;
        public bool DefaultCamera {
          get { return defaultCamera_; }
          set {
            defaultCamera_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as PlayerCameraProto);
        }

        public bool Equals(PlayerCameraProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DefaultCamera != other.DefaultCamera) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (DefaultCamera != false) hash ^= DefaultCamera.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (DefaultCamera != false) {
            output.WriteRawTag(8);
            output.WriteBool(DefaultCamera);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (DefaultCamera != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(PlayerCameraProto other) {
          if (other == null) {
            return;
          }
          if (other.DefaultCamera != false) {
            DefaultCamera = other.DefaultCamera;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                DefaultCamera = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class PlayerCurrencyProto : pb::IMessage<PlayerCurrencyProto> {
        private static readonly pb::MessageParser<PlayerCurrencyProto> _parser = new pb::MessageParser<PlayerCurrencyProto>(() => new PlayerCurrencyProto());
        public static pb::MessageParser<PlayerCurrencyProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.InventoryItemProto.Descriptor.NestedTypes[5]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public PlayerCurrencyProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public PlayerCurrencyProto(PlayerCurrencyProto other) : this() {
          gems_ = other.gems_;
        }

        public PlayerCurrencyProto Clone() {
          return new PlayerCurrencyProto(this);
        }

        /// <summary>Field number for the "Gems" field.</summary>
        public const int GemsFieldNumber = 1;
        private int gems_;
        public int Gems {
          get { return gems_; }
          set {
            gems_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as PlayerCurrencyProto);
        }

        public bool Equals(PlayerCurrencyProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Gems != other.Gems) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Gems != 0) hash ^= Gems.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Gems != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Gems);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Gems != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gems);
          }
          return size;
        }

        public void MergeFrom(PlayerCurrencyProto other) {
          if (other == null) {
            return;
          }
          if (other.Gems != 0) {
            Gems = other.Gems;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Gems = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class InventoryUpgradesProto : pb::IMessage<InventoryUpgradesProto> {
        private static readonly pb::MessageParser<InventoryUpgradesProto> _parser = new pb::MessageParser<InventoryUpgradesProto>(() => new InventoryUpgradesProto());
        public static pb::MessageParser<InventoryUpgradesProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.InventoryItemProto.Descriptor.NestedTypes[6]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public InventoryUpgradesProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public InventoryUpgradesProto(InventoryUpgradesProto other) : this() {
          inventoryUpgrade_ = other.inventoryUpgrade_;
        }

        public InventoryUpgradesProto Clone() {
          return new InventoryUpgradesProto(this);
        }

        /// <summary>Field number for the "InventoryUpgrade" field.</summary>
        public const int InventoryUpgradeFieldNumber = 1;
        private int inventoryUpgrade_;
        public int InventoryUpgrade {
          get { return inventoryUpgrade_; }
          set {
            inventoryUpgrade_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as InventoryUpgradesProto);
        }

        public bool Equals(InventoryUpgradesProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (InventoryUpgrade != other.InventoryUpgrade) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (InventoryUpgrade != 0) hash ^= InventoryUpgrade.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (InventoryUpgrade != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(InventoryUpgrade);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (InventoryUpgrade != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(InventoryUpgrade);
          }
          return size;
        }

        public void MergeFrom(InventoryUpgradesProto other) {
          if (other == null) {
            return;
          }
          if (other.InventoryUpgrade != 0) {
            InventoryUpgrade = other.InventoryUpgrade;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InventoryUpgrade = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class EggIncubatorProto : pb::IMessage<EggIncubatorProto> {
        private static readonly pb::MessageParser<EggIncubatorProto> _parser = new pb::MessageParser<EggIncubatorProto>(() => new EggIncubatorProto());
        public static pb::MessageParser<EggIncubatorProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.InventoryItemProto.Descriptor.NestedTypes[7]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public EggIncubatorProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public EggIncubatorProto(EggIncubatorProto other) : this() {
          itemId_ = other.itemId_;
          Item = other.item_ != null ? other.Item.Clone() : null;
          incubatorType_ = other.incubatorType_;
          usesRemaining_ = other.usesRemaining_;
          pokemonId_ = other.pokemonId_;
          startKmWalked_ = other.startKmWalked_;
          targetKmWalked_ = other.targetKmWalked_;
        }

        public EggIncubatorProto Clone() {
          return new EggIncubatorProto(this);
        }

        /// <summary>Field number for the "ItemId" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private string itemId_ = "";
        public string ItemId {
          get { return itemId_; }
          set {
            itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Item" field.</summary>
        public const int ItemFieldNumber = 2;
        private global::PokemonGoApi.Proto.InventoryItemProto.Types.ItemProto item_;
        public global::PokemonGoApi.Proto.InventoryItemProto.Types.ItemProto Item {
          get { return item_; }
          set {
            item_ = value;
          }
        }

        /// <summary>Field number for the "IncubatorType" field.</summary>
        public const int IncubatorTypeFieldNumber = 3;
        private int incubatorType_;
        public int IncubatorType {
          get { return incubatorType_; }
          set {
            incubatorType_ = value;
          }
        }

        /// <summary>Field number for the "UsesRemaining" field.</summary>
        public const int UsesRemainingFieldNumber = 4;
        private int usesRemaining_;
        public int UsesRemaining {
          get { return usesRemaining_; }
          set {
            usesRemaining_ = value;
          }
        }

        /// <summary>Field number for the "PokemonId" field.</summary>
        public const int PokemonIdFieldNumber = 5;
        private long pokemonId_;
        public long PokemonId {
          get { return pokemonId_; }
          set {
            pokemonId_ = value;
          }
        }

        /// <summary>Field number for the "StartKmWalked" field.</summary>
        public const int StartKmWalkedFieldNumber = 6;
        private double startKmWalked_;
        public double StartKmWalked {
          get { return startKmWalked_; }
          set {
            startKmWalked_ = value;
          }
        }

        /// <summary>Field number for the "TargetKmWalked" field.</summary>
        public const int TargetKmWalkedFieldNumber = 7;
        private double targetKmWalked_;
        public double TargetKmWalked {
          get { return targetKmWalked_; }
          set {
            targetKmWalked_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as EggIncubatorProto);
        }

        public bool Equals(EggIncubatorProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ItemId != other.ItemId) return false;
          if (!object.Equals(Item, other.Item)) return false;
          if (IncubatorType != other.IncubatorType) return false;
          if (UsesRemaining != other.UsesRemaining) return false;
          if (PokemonId != other.PokemonId) return false;
          if (StartKmWalked != other.StartKmWalked) return false;
          if (TargetKmWalked != other.TargetKmWalked) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
          if (item_ != null) hash ^= Item.GetHashCode();
          if (IncubatorType != 0) hash ^= IncubatorType.GetHashCode();
          if (UsesRemaining != 0) hash ^= UsesRemaining.GetHashCode();
          if (PokemonId != 0L) hash ^= PokemonId.GetHashCode();
          if (StartKmWalked != 0D) hash ^= StartKmWalked.GetHashCode();
          if (TargetKmWalked != 0D) hash ^= TargetKmWalked.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ItemId);
          }
          if (item_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Item);
          }
          if (IncubatorType != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(IncubatorType);
          }
          if (UsesRemaining != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(UsesRemaining);
          }
          if (PokemonId != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(PokemonId);
          }
          if (StartKmWalked != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(StartKmWalked);
          }
          if (TargetKmWalked != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(TargetKmWalked);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (ItemId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
          }
          if (item_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
          }
          if (IncubatorType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(IncubatorType);
          }
          if (UsesRemaining != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsesRemaining);
          }
          if (PokemonId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PokemonId);
          }
          if (StartKmWalked != 0D) {
            size += 1 + 8;
          }
          if (TargetKmWalked != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        public void MergeFrom(EggIncubatorProto other) {
          if (other == null) {
            return;
          }
          if (other.ItemId.Length != 0) {
            ItemId = other.ItemId;
          }
          if (other.item_ != null) {
            if (item_ == null) {
              item_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.ItemProto();
            }
            Item.MergeFrom(other.Item);
          }
          if (other.IncubatorType != 0) {
            IncubatorType = other.IncubatorType;
          }
          if (other.UsesRemaining != 0) {
            UsesRemaining = other.UsesRemaining;
          }
          if (other.PokemonId != 0L) {
            PokemonId = other.PokemonId;
          }
          if (other.StartKmWalked != 0D) {
            StartKmWalked = other.StartKmWalked;
          }
          if (other.TargetKmWalked != 0D) {
            TargetKmWalked = other.TargetKmWalked;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                ItemId = input.ReadString();
                break;
              }
              case 18: {
                if (item_ == null) {
                  item_ = new global::PokemonGoApi.Proto.InventoryItemProto.Types.ItemProto();
                }
                input.ReadMessage(item_);
                break;
              }
              case 24: {
                IncubatorType = input.ReadInt32();
                break;
              }
              case 32: {
                UsesRemaining = input.ReadInt32();
                break;
              }
              case 40: {
                PokemonId = input.ReadInt64();
                break;
              }
              case 49: {
                StartKmWalked = input.ReadDouble();
                break;
              }
              case 57: {
                TargetKmWalked = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class PokemonFamilyProto : pb::IMessage<PokemonFamilyProto> {
        private static readonly pb::MessageParser<PokemonFamilyProto> _parser = new pb::MessageParser<PokemonFamilyProto>(() => new PokemonFamilyProto());
        public static pb::MessageParser<PokemonFamilyProto> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::PokemonGoApi.Proto.InventoryItemProto.Descriptor.NestedTypes[8]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public PokemonFamilyProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        public PokemonFamilyProto(PokemonFamilyProto other) : this() {
          familyId_ = other.familyId_;
          candy_ = other.candy_;
        }

        public PokemonFamilyProto Clone() {
          return new PokemonFamilyProto(this);
        }

        /// <summary>Field number for the "FamilyId" field.</summary>
        public const int FamilyIdFieldNumber = 1;
        private int familyId_;
        public int FamilyId {
          get { return familyId_; }
          set {
            familyId_ = value;
          }
        }

        /// <summary>Field number for the "Candy" field.</summary>
        public const int CandyFieldNumber = 2;
        private int candy_;
        public int Candy {
          get { return candy_; }
          set {
            candy_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as PokemonFamilyProto);
        }

        public bool Equals(PokemonFamilyProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FamilyId != other.FamilyId) return false;
          if (Candy != other.Candy) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (FamilyId != 0) hash ^= FamilyId.GetHashCode();
          if (Candy != 0) hash ^= Candy.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (FamilyId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(FamilyId);
          }
          if (Candy != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Candy);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (FamilyId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FamilyId);
          }
          if (Candy != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Candy);
          }
          return size;
        }

        public void MergeFrom(PokemonFamilyProto other) {
          if (other == null) {
            return;
          }
          if (other.FamilyId != 0) {
            FamilyId = other.FamilyId;
          }
          if (other.Candy != 0) {
            Candy = other.Candy;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                FamilyId = input.ReadInt32();
                break;
              }
              case 16: {
                Candy = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  POKEMON TRANSFER
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TransferPokemonProto : pb::IMessage<TransferPokemonProto> {
    private static readonly pb::MessageParser<TransferPokemonProto> _parser = new pb::MessageParser<TransferPokemonProto>(() => new TransferPokemonProto());
    public static pb::MessageParser<TransferPokemonProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.InventoryReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TransferPokemonProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TransferPokemonProto(TransferPokemonProto other) : this() {
      pokemonId_ = other.pokemonId_;
    }

    public TransferPokemonProto Clone() {
      return new TransferPokemonProto(this);
    }

    /// <summary>Field number for the "PokemonId" field.</summary>
    public const int PokemonIdFieldNumber = 1;
    private ulong pokemonId_;
    public ulong PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TransferPokemonProto);
    }

    public bool Equals(TransferPokemonProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PokemonId != other.PokemonId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PokemonId != 0UL) hash ^= PokemonId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PokemonId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(PokemonId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PokemonId != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(TransferPokemonProto other) {
      if (other == null) {
        return;
      }
      if (other.PokemonId != 0UL) {
        PokemonId = other.PokemonId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            PokemonId = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TransferPokemonOutProto : pb::IMessage<TransferPokemonOutProto> {
    private static readonly pb::MessageParser<TransferPokemonOutProto> _parser = new pb::MessageParser<TransferPokemonOutProto>(() => new TransferPokemonOutProto());
    public static pb::MessageParser<TransferPokemonOutProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.InventoryReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TransferPokemonOutProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TransferPokemonOutProto(TransferPokemonOutProto other) : this() {
      status_ = other.status_;
      candyAwarded_ = other.candyAwarded_;
    }

    public TransferPokemonOutProto Clone() {
      return new TransferPokemonOutProto(this);
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "CandyAwarded" field.</summary>
    public const int CandyAwardedFieldNumber = 2;
    private int candyAwarded_;
    public int CandyAwarded {
      get { return candyAwarded_; }
      set {
        candyAwarded_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TransferPokemonOutProto);
    }

    public bool Equals(TransferPokemonOutProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (CandyAwarded != other.CandyAwarded) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CandyAwarded != 0) hash ^= CandyAwarded.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (CandyAwarded != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CandyAwarded);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (CandyAwarded != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CandyAwarded);
      }
      return size;
    }

    public void MergeFrom(TransferPokemonOutProto other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CandyAwarded != 0) {
        CandyAwarded = other.CandyAwarded;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            CandyAwarded = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  EVOLVE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EvolvePokemonProto : pb::IMessage<EvolvePokemonProto> {
    private static readonly pb::MessageParser<EvolvePokemonProto> _parser = new pb::MessageParser<EvolvePokemonProto>(() => new EvolvePokemonProto());
    public static pb::MessageParser<EvolvePokemonProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.InventoryReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EvolvePokemonProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EvolvePokemonProto(EvolvePokemonProto other) : this() {
      pokemonId_ = other.pokemonId_;
    }

    public EvolvePokemonProto Clone() {
      return new EvolvePokemonProto(this);
    }

    /// <summary>Field number for the "PokemonId" field.</summary>
    public const int PokemonIdFieldNumber = 1;
    private ulong pokemonId_;
    public ulong PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EvolvePokemonProto);
    }

    public bool Equals(EvolvePokemonProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PokemonId != other.PokemonId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PokemonId != 0UL) hash ^= PokemonId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PokemonId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(PokemonId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PokemonId != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(EvolvePokemonProto other) {
      if (other == null) {
        return;
      }
      if (other.PokemonId != 0UL) {
        PokemonId = other.PokemonId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            PokemonId = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EvolvePokemonOutProto : pb::IMessage<EvolvePokemonOutProto> {
    private static readonly pb::MessageParser<EvolvePokemonOutProto> _parser = new pb::MessageParser<EvolvePokemonOutProto>(() => new EvolvePokemonOutProto());
    public static pb::MessageParser<EvolvePokemonOutProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoApi.Proto.InventoryReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EvolvePokemonOutProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EvolvePokemonOutProto(EvolvePokemonOutProto other) : this() {
      result_ = other.result_;
      EvolvedPokemon = other.evolvedPokemon_ != null ? other.EvolvedPokemon.Clone() : null;
      expAwarded_ = other.expAwarded_;
      candyAwarded_ = other.candyAwarded_;
    }

    public EvolvePokemonOutProto Clone() {
      return new EvolvePokemonOutProto(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "EvolvedPokemon" field.</summary>
    public const int EvolvedPokemonFieldNumber = 2;
    private global::PokemonGoApi.Proto.PokemonProto evolvedPokemon_;
    public global::PokemonGoApi.Proto.PokemonProto EvolvedPokemon {
      get { return evolvedPokemon_; }
      set {
        evolvedPokemon_ = value;
      }
    }

    /// <summary>Field number for the "ExpAwarded" field.</summary>
    public const int ExpAwardedFieldNumber = 3;
    private int expAwarded_;
    public int ExpAwarded {
      get { return expAwarded_; }
      set {
        expAwarded_ = value;
      }
    }

    /// <summary>Field number for the "CandyAwarded" field.</summary>
    public const int CandyAwardedFieldNumber = 4;
    private int candyAwarded_;
    public int CandyAwarded {
      get { return candyAwarded_; }
      set {
        candyAwarded_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EvolvePokemonOutProto);
    }

    public bool Equals(EvolvePokemonOutProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!object.Equals(EvolvedPokemon, other.EvolvedPokemon)) return false;
      if (ExpAwarded != other.ExpAwarded) return false;
      if (CandyAwarded != other.CandyAwarded) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (evolvedPokemon_ != null) hash ^= EvolvedPokemon.GetHashCode();
      if (ExpAwarded != 0) hash ^= ExpAwarded.GetHashCode();
      if (CandyAwarded != 0) hash ^= CandyAwarded.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (evolvedPokemon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EvolvedPokemon);
      }
      if (ExpAwarded != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExpAwarded);
      }
      if (CandyAwarded != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CandyAwarded);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (evolvedPokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EvolvedPokemon);
      }
      if (ExpAwarded != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpAwarded);
      }
      if (CandyAwarded != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CandyAwarded);
      }
      return size;
    }

    public void MergeFrom(EvolvePokemonOutProto other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.evolvedPokemon_ != null) {
        if (evolvedPokemon_ == null) {
          evolvedPokemon_ = new global::PokemonGoApi.Proto.PokemonProto();
        }
        EvolvedPokemon.MergeFrom(other.EvolvedPokemon);
      }
      if (other.ExpAwarded != 0) {
        ExpAwarded = other.ExpAwarded;
      }
      if (other.CandyAwarded != 0) {
        CandyAwarded = other.CandyAwarded;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            if (evolvedPokemon_ == null) {
              evolvedPokemon_ = new global::PokemonGoApi.Proto.PokemonProto();
            }
            input.ReadMessage(evolvedPokemon_);
            break;
          }
          case 24: {
            ExpAwarded = input.ReadInt32();
            break;
          }
          case 32: {
            CandyAwarded = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
